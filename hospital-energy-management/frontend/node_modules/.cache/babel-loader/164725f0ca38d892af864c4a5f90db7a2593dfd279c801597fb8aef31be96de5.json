{"ast":null,"code":"// We will need a charting library later, e.g., ECharts or Chart.js\n// import * as echarts from 'echarts'; // Example for ECharts\n\nexport default {\n  name: 'EnergyAnalysis',\n  data() {\n    return {\n      filters: {\n        deviceIds: [],\n        // Array of selected device IDs\n        energyType: '',\n        // Single energy type string\n        timeRange: [] // [startDate, endDate]\n      },\n      deviceList: [],\n      loading: false,\n      // Chart instances, to be initialized later\n      trendChartInstance: null,\n      pieChartInstance: null,\n      // Raw data from backend for charts\n      analysisData: null\n    };\n  },\n  methods: {\n    fetchDevices() {\n      this.$http.get('/api/devices').then(response => {\n        this.deviceList = response.data;\n      }).catch(error => {\n        this.$message.error('获取设备列表失败: ' + error.message);\n      });\n    },\n    performAnalysis() {\n      this.$refs.filterFormRef.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          let params = {\n            deviceIds: this.filters.deviceIds.join(','),\n            // Send as comma-separated string or array, backend dependent\n            energyType: this.filters.energyType\n          };\n          if (this.filters.timeRange && this.filters.timeRange.length === 2) {\n            params.startTime = this.filters.timeRange[0];\n            params.endTime = this.filters.timeRange[1];\n          }\n\n          // TODO: Replace with actual API call to backend statistics endpoint\n          console.log(\"Submitting analysis params:\", params);\n          // Example: this.$http.get('/api/energy-stats', { params })\n          // For now, simulate API call\n          setTimeout(() => {\n            this.analysisData = {\n              // Example structure, backend should provide this\n              trend: [{\n                time: '2024-05-01',\n                value: 150\n              }, {\n                time: '2024-05-02',\n                value: 160\n              }, {\n                time: '2024-05-03',\n                value: 155\n              }],\n              pie: [{\n                name: '设备A',\n                value: 400\n              }, {\n                name: '设备B',\n                value: 300\n              }, {\n                name: '设备C',\n                value: 300\n              }]\n            };\n            this.$message.success('能耗分析数据已获取 (模拟)!');\n            this.loading = false;\n            this.renderCharts(); // Call method to render charts with new data\n          }, 1000);\n        } else {\n          this.$message.error('请检查筛选条件!');\n          return false;\n        }\n      });\n    },\n    resetFilters() {\n      this.$refs.filterFormRef.resetFields();\n      this.filters.deviceIds = [];\n      this.filters.energyType = '';\n      this.filters.timeRange = [];\n      // Optionally clear charts or fetch default data\n      if (this.trendChartInstance) this.trendChartInstance.clear();\n      if (this.pieChartInstance) this.pieChartInstance.clear();\n      this.analysisData = null;\n    },\n    renderCharts() {\n      if (!this.analysisData) return;\n      this.$message.info('渲染图表... (需要集成图表库并实现此方法)');\n      // TODO: Implement actual chart rendering using a library like ECharts or Chart.js\n      // Example for ECharts (assuming 'echarts' is imported and initialized):\n      // if (this.trendChartInstance) this.trendChartInstance.dispose();\n      // this.trendChartInstance = echarts.init(this.$refs.trendChart);\n      // this.trendChartInstance.setOption({ /* ... ECharts option for trend ... */ series: [{data: this.analysisData.trend.map(item => item.value)}] });\n\n      // if (this.pieChartInstance) this.pieChartInstance.dispose();\n      // this.pieChartInstance = echarts.init(this.$refs.pieChart);\n      // this.pieChartInstance.setOption({ /* ... ECharts option for pie ... */ series: [{data: this.analysisData.pie}] });\n    }\n  },\n  mounted() {\n    // It's good practice to initialize charts after the component is mounted and refs are available.\n    // However, actual rendering should happen after data is fetched.\n  },\n  created() {\n    this.fetchDevices();\n  },\n  beforeDestroy() {\n    // Dispose chart instances when component is destroyed to prevent memory leaks\n    if (this.trendChartInstance) {\n      this.trendChartInstance.dispose();\n      this.trendChartInstance = null;\n    }\n    if (this.pieChartInstance) {\n      this.pieChartInstance.dispose();\n      this.pieChartInstance = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","filters","deviceIds","energyType","timeRange","deviceList","loading","trendChartInstance","pieChartInstance","analysisData","methods","fetchDevices","$http","get","then","response","catch","error","$message","message","performAnalysis","$refs","filterFormRef","validate","valid","params","join","length","startTime","endTime","console","log","setTimeout","trend","time","value","pie","success","renderCharts","resetFilters","resetFields","clear","info","mounted","created","beforeDestroy","dispose"],"sources":["src/views/EnergyAnalysis.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-analysis-container\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能耗分析</span>\r\n      </div>\r\n\r\n      <!-- Filter Section -->\r\n      <el-form :inline=\"true\" :model=\"filters\" class=\"filter-form\" ref=\"filterFormRef\">\r\n        <el-form-item label=\"选择设备\" prop=\"deviceIds\">\r\n          <el-select v-model=\"filters.deviceIds\" multiple placeholder=\"请选择一个或多个设备\" style=\"width: 300px;\" clearable>\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + ' (' + device.model + ')'\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"能源类型\" prop=\"energyType\">\r\n           <el-input v-model=\"filters.energyType\" placeholder=\"例如: 电能, 水\" style=\"width: 200px;\" clearable></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"分析周期\" prop=\"timeRange\">\r\n          <el-date-picker\r\n            v-model=\"filters.timeRange\"\r\n            type=\"datetimerange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期时间\"\r\n            end-placeholder=\"结束日期时间\"\r\n            format=\"yyyy-MM-dd HH:mm:ss\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\"\r\n            style=\"width: 380px;\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"performAnalysis\" :loading=\"loading\">开始分析</el-button>\r\n          <el-button icon=\"el-icon-refresh\" @click=\"resetFilters\">重置筛选</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <!-- Chart Display Area -->\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"12\">\r\n          <el-card shadow=\"hover\">\r\n            <div slot=\"header\">能耗趋势图 (示例)</div>\r\n            <div ref=\"trendChart\" style=\"height: 400px;\"></div>\r\n            <!-- Placeholder for trend chart -->\r\n          </el-card>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <el-card shadow=\"hover\">\r\n            <div slot=\"header\">能耗占比图 (示例)</div>\r\n            <div ref=\"pieChart\" style=\"height: 400px;\"></div>\r\n            <!-- Placeholder for pie chart -->\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n      \r\n      <!-- You can add more chart containers or data tables here -->\r\n\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// We will need a charting library later, e.g., ECharts or Chart.js\r\n// import * as echarts from 'echarts'; // Example for ECharts\r\n\r\nexport default {\r\n  name: 'EnergyAnalysis',\r\n  data() {\r\n    return {\r\n      filters: {\r\n        deviceIds: [],      // Array of selected device IDs\r\n        energyType: '',    // Single energy type string\r\n        timeRange: []       // [startDate, endDate]\r\n      },\r\n      deviceList: [],\r\n      loading: false,\r\n      // Chart instances, to be initialized later\r\n      trendChartInstance: null,\r\n      pieChartInstance: null,\r\n      // Raw data from backend for charts\r\n      analysisData: null \r\n    };\r\n  },\r\n  methods: {\r\n    fetchDevices() {\r\n      this.$http.get('/api/devices')\r\n        .then(response => {\r\n          this.deviceList = response.data;\r\n        })\r\n        .catch(error => {\r\n          this.$message.error('获取设备列表失败: ' + error.message);\r\n        });\r\n    },\r\n    performAnalysis() {\r\n      this.$refs.filterFormRef.validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          let params = {\r\n            deviceIds: this.filters.deviceIds.join(','), // Send as comma-separated string or array, backend dependent\r\n            energyType: this.filters.energyType,\r\n          };\r\n          if (this.filters.timeRange && this.filters.timeRange.length === 2) {\r\n            params.startTime = this.filters.timeRange[0];\r\n            params.endTime = this.filters.timeRange[1];\r\n          }\r\n\r\n          // TODO: Replace with actual API call to backend statistics endpoint\r\n          console.log(\"Submitting analysis params:\", params);\r\n          // Example: this.$http.get('/api/energy-stats', { params })\r\n          // For now, simulate API call\r\n          setTimeout(() => {\r\n            this.analysisData = {\r\n                // Example structure, backend should provide this\r\n                trend: [\r\n                    { time: '2024-05-01', value: 150 }, \r\n                    { time: '2024-05-02', value: 160 },\r\n                    { time: '2024-05-03', value: 155 }\r\n                ],\r\n                pie: [\r\n                    { name: '设备A', value: 400 },\r\n                    { name: '设备B', value: 300 },\r\n                    { name: '设备C', value: 300 }\r\n                ]\r\n            };\r\n            this.$message.success('能耗分析数据已获取 (模拟)!');\r\n            this.loading = false;\r\n            this.renderCharts(); // Call method to render charts with new data\r\n          }, 1000);\r\n\r\n        } else {\r\n          this.$message.error('请检查筛选条件!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetFilters() {\r\n      this.$refs.filterFormRef.resetFields();\r\n      this.filters.deviceIds = [];\r\n      this.filters.energyType = '';\r\n      this.filters.timeRange = [];\r\n      // Optionally clear charts or fetch default data\r\n      if (this.trendChartInstance) this.trendChartInstance.clear();\r\n      if (this.pieChartInstance) this.pieChartInstance.clear();\r\n      this.analysisData = null;\r\n    },\r\n    renderCharts() {\r\n      if (!this.analysisData) return;\r\n      this.$message.info('渲染图表... (需要集成图表库并实现此方法)');\r\n      // TODO: Implement actual chart rendering using a library like ECharts or Chart.js\r\n      // Example for ECharts (assuming 'echarts' is imported and initialized):\r\n      // if (this.trendChartInstance) this.trendChartInstance.dispose();\r\n      // this.trendChartInstance = echarts.init(this.$refs.trendChart);\r\n      // this.trendChartInstance.setOption({ /* ... ECharts option for trend ... */ series: [{data: this.analysisData.trend.map(item => item.value)}] });\r\n\r\n      // if (this.pieChartInstance) this.pieChartInstance.dispose();\r\n      // this.pieChartInstance = echarts.init(this.$refs.pieChart);\r\n      // this.pieChartInstance.setOption({ /* ... ECharts option for pie ... */ series: [{data: this.analysisData.pie}] });\r\n    }\r\n  },\r\n  mounted() {\r\n    // It's good practice to initialize charts after the component is mounted and refs are available.\r\n    // However, actual rendering should happen after data is fetched.\r\n  },\r\n  created() {\r\n    this.fetchDevices();\r\n  },\r\n  beforeDestroy() {\r\n    // Dispose chart instances when component is destroyed to prevent memory leaks\r\n    if (this.trendChartInstance) {\r\n      this.trendChartInstance.dispose();\r\n      this.trendChartInstance = null;\r\n    }\r\n    if (this.pieChartInstance) {\r\n      this.pieChartInstance.dispose();\r\n      this.pieChartInstance = null;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-analysis-container {\r\n  padding: 20px;\r\n}\r\n.filter-form {\r\n  margin-bottom: 20px;\r\n}\r\n.el-select, .el-date-picker, .el-input {\r\n  /* width: 100%; */ /* Let inline form items manage width or set specific widths */\r\n}\r\n.el-form--inline .el-form-item {\r\n  margin-right: 10px;\r\n}\r\n.el-card {\r\n  margin-bottom: 20px; /* Add some space between filter card and chart cards */\r\n}\r\n</style> "],"mappings":"AAoEA;AACA;;AAEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;QACAC,SAAA;QAAA;QACAC,UAAA;QAAA;QACAC,SAAA;MACA;MACAC,UAAA;MACAC,OAAA;MACA;MACAC,kBAAA;MACAC,gBAAA;MACA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAA;MACA,KAAAC,KAAA,CAAAC,GAAA,iBACAC,IAAA,CAAAC,QAAA;QACA,KAAAV,UAAA,GAAAU,QAAA,CAAAf,IAAA;MACA,GACAgB,KAAA,CAAAC,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA,gBAAAA,KAAA,CAAAE,OAAA;MACA;IACA;IACAC,gBAAA;MACA,KAAAC,KAAA,CAAAC,aAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAlB,OAAA;UACA,IAAAmB,MAAA;YACAvB,SAAA,OAAAD,OAAA,CAAAC,SAAA,CAAAwB,IAAA;YAAA;YACAvB,UAAA,OAAAF,OAAA,CAAAE;UACA;UACA,SAAAF,OAAA,CAAAG,SAAA,SAAAH,OAAA,CAAAG,SAAA,CAAAuB,MAAA;YACAF,MAAA,CAAAG,SAAA,QAAA3B,OAAA,CAAAG,SAAA;YACAqB,MAAA,CAAAI,OAAA,QAAA5B,OAAA,CAAAG,SAAA;UACA;;UAEA;UACA0B,OAAA,CAAAC,GAAA,gCAAAN,MAAA;UACA;UACA;UACAO,UAAA;YACA,KAAAvB,YAAA;cACA;cACAwB,KAAA,GACA;gBAAAC,IAAA;gBAAAC,KAAA;cAAA,GACA;gBAAAD,IAAA;gBAAAC,KAAA;cAAA,GACA;gBAAAD,IAAA;gBAAAC,KAAA;cAAA,EACA;cACAC,GAAA,GACA;gBAAArC,IAAA;gBAAAoC,KAAA;cAAA,GACA;gBAAApC,IAAA;gBAAAoC,KAAA;cAAA,GACA;gBAAApC,IAAA;gBAAAoC,KAAA;cAAA;YAEA;YACA,KAAAjB,QAAA,CAAAmB,OAAA;YACA,KAAA/B,OAAA;YACA,KAAAgC,YAAA;UACA;QAEA;UACA,KAAApB,QAAA,CAAAD,KAAA;UACA;QACA;MACA;IACA;IACAsB,aAAA;MACA,KAAAlB,KAAA,CAAAC,aAAA,CAAAkB,WAAA;MACA,KAAAvC,OAAA,CAAAC,SAAA;MACA,KAAAD,OAAA,CAAAE,UAAA;MACA,KAAAF,OAAA,CAAAG,SAAA;MACA;MACA,SAAAG,kBAAA,OAAAA,kBAAA,CAAAkC,KAAA;MACA,SAAAjC,gBAAA,OAAAA,gBAAA,CAAAiC,KAAA;MACA,KAAAhC,YAAA;IACA;IACA6B,aAAA;MACA,UAAA7B,YAAA;MACA,KAAAS,QAAA,CAAAwB,IAAA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA;EAAA,CACA;EACAC,QAAA;IACA,KAAAjC,YAAA;EACA;EACAkC,cAAA;IACA;IACA,SAAAtC,kBAAA;MACA,KAAAA,kBAAA,CAAAuC,OAAA;MACA,KAAAvC,kBAAA;IACA;IACA,SAAAC,gBAAA;MACA,KAAAA,gBAAA,CAAAsC,OAAA;MACA,KAAAtC,gBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}