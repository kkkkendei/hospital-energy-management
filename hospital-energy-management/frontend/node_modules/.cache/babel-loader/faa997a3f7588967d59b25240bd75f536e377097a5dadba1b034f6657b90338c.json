{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport moment from 'moment';\nexport default {\n  name: 'EnergyDataView',\n  data() {\n    return {\n      filters: {\n        deviceId: null,\n        startTime: null,\n        endTime: null\n      },\n      deviceList: [],\n      energyDataList: [],\n      deviceMap: {},\n      loading: false\n    };\n  },\n  created() {\n    this.fetchDeviceList();\n    this.fetchEnergyData();\n  },\n  methods: {\n    async fetchDeviceList() {\n      try {\n        const response = await this.$http.get('/devices');\n        this.deviceList = response.data || [];\n        this.deviceMap = this.deviceList.reduce((map, device) => {\n          map[device.id] = device.name;\n          return map;\n        }, {});\n      } catch (error) {\n        console.error(\"获取设备列表失败:\", error);\n        this.$message.error('获取设备列表失败，请稍后重试。');\n      }\n    },\n    getDeviceName(deviceId) {\n      return this.deviceMap[deviceId] || '未知设备';\n    },\n    async fetchEnergyData() {\n      this.loading = true;\n      try {\n        let apiUrl = '/energy-data';\n        const params = {};\n        if (this.filters.deviceId && this.filters.startTime && this.filters.endTime) {\n          apiUrl = `/energy-data/device/${this.filters.deviceId}/range`;\n          params.startTime = this.filters.startTime;\n          params.endTime = this.filters.endTime;\n        } else if (this.filters.deviceId) {\n          apiUrl = `/energy-data/device/${this.filters.deviceId}`;\n        } else if (this.filters.startTime && this.filters.endTime) {\n          apiUrl = '/energy-data/range';\n          params.startTime = this.filters.startTime;\n          params.endTime = this.filters.endTime;\n        } else {\n          apiUrl = '/energy-data';\n        }\n        const response = await this.$http.get(apiUrl, {\n          params\n        });\n        this.energyDataList = response.data || [];\n      } catch (error) {\n        console.error(\"获取能源数据失败:\", error);\n        const errorMsg = error.response && error.response.data && (typeof error.response.data === 'string' ? error.response.data : error.response.data.message) ? typeof error.response.data === 'string' ? error.response.data : error.response.data.message : '获取能源数据失败，请稍后重试。';\n        this.$message.error(errorMsg);\n        this.energyDataList = [];\n      } finally {\n        this.loading = false;\n      }\n    },\n    handleSearch() {\n      if (this.filters.startTime && this.filters.endTime && moment(this.filters.startTime).isAfter(moment(this.filters.endTime))) {\n        this.$message.error('开始时间不能晚于结束时间');\n        return;\n      }\n      if (this.filters.startTime && !this.filters.endTime || !this.filters.startTime && this.filters.endTime) {\n        this.$message.error('查询时间范围时，开始和结束时间均需选择。');\n        return;\n      }\n      this.fetchEnergyData();\n    },\n    resetFilters() {\n      this.$refs.filterFormRef.resetFields();\n      this.filters.deviceId = null;\n      this.filters.startTime = null;\n      this.filters.endTime = null;\n      this.fetchEnergyData();\n    },\n    formatDateTime(dateTimeArray) {\n      if (!dateTimeArray) return '';\n      if (Array.isArray(dateTimeArray)) {\n        const [year, month, day, hour, minute, second] = dateTimeArray;\n        return moment({\n          year,\n          month: month - 1,\n          day,\n          hour,\n          minute,\n          second\n        }).format('YYYY-MM-DD HH:mm:ss');\n      }\n      return moment(dateTimeArray).format('YYYY-MM-DD HH:mm:ss');\n    }\n  }\n};","map":{"version":3,"names":["moment","name","data","filters","deviceId","startTime","endTime","deviceList","energyDataList","deviceMap","loading","created","fetchDeviceList","fetchEnergyData","methods","response","$http","get","reduce","map","device","id","error","console","$message","getDeviceName","apiUrl","params","errorMsg","message","handleSearch","isAfter","resetFilters","$refs","filterFormRef","resetFields","formatDateTime","dateTimeArray","Array","isArray","year","month","day","hour","minute","second","format"],"sources":["src/views/EnergyDataView.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-data-view\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能源数据查询</span>\r\n      </div>\r\n\r\n      <!-- Filter Section -->\r\n      <el-form :inline=\"true\" :model=\"filters\" ref=\"filterFormRef\" class=\"filter-form\">\r\n        <el-form-item label=\"选择设备\" prop=\"deviceId\">\r\n          <el-select v-model=\"filters.deviceId\" placeholder=\"所有设备\" clearable filterable style=\"width: 220px;\">\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + (device.model ? ' (' + device.model + ')' : '')\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"开始时间\" prop=\"startTime\">\r\n          <el-date-picker\r\n            v-model=\"filters.startTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"选择开始时间\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\"\r\n            style=\"width: 200px;\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n        <el-form-item label=\"结束时间\" prop=\"endTime\">\r\n          <el-date-picker\r\n            v-model=\"filters.endTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"选择结束时间\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\"\r\n            style=\"width: 200px;\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"handleSearch\" :loading=\"loading\">查 询</el-button>\r\n          <el-button @click=\"resetFilters\">重 置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <!-- Data Table -->\r\n      <el-table\r\n        :data=\"energyDataList\"\r\n        v-loading=\"loading\"\r\n        style=\"width: 100%\"\r\n        border\r\n        stripe>\r\n        <el-table-column prop=\"id\" label=\"记录ID\" width=\"80\" sortable></el-table-column>\r\n        <el-table-column prop=\"deviceId\" label=\"设备ID\" width=\"100\" sortable></el-table-column>\r\n        <el-table-column label=\"设备名称\" width=\"180\" show-overflow-tooltip>\r\n            <template slot-scope=\"scope\">\r\n                {{ getDeviceName(scope.row.deviceId) }}\r\n            </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"recordTime\" label=\"记录时间\" width=\"180\" sortable>\r\n          <template slot-scope=\"scope\">\r\n            {{ formatDateTime(scope.row.recordTime) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"energyValue\" label=\"能耗值\" width=\"120\" sortable></el-table-column>\r\n        <el-table-column prop=\"energyUnit\" label=\"单位\" width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"notes\" label=\"备注\" show-overflow-tooltip></el-table-column>\r\n      </el-table>\r\n\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from 'moment'; \r\n\r\nexport default {\r\n  name: 'EnergyDataView',\r\n  data() {\r\n    return {\r\n      filters: {\r\n        deviceId: null,\r\n        startTime: null,\r\n        endTime: null,\r\n      },\r\n      deviceList: [],\r\n      energyDataList: [],\r\n      deviceMap: {},\r\n      loading: false,\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchDeviceList();\r\n    this.fetchEnergyData(); \r\n  },\r\n  methods: {\r\n    async fetchDeviceList() {\r\n      try {\r\n        const response = await this.$http.get('/devices');\r\n        this.deviceList = response.data || [];\r\n        this.deviceMap = this.deviceList.reduce((map, device) => {\r\n            map[device.id] = device.name;\r\n            return map;\r\n        }, {});\r\n      } catch (error) {\r\n        console.error(\"获取设备列表失败:\", error);\r\n        this.$message.error('获取设备列表失败，请稍后重试。');\r\n      }\r\n    },\r\n    getDeviceName(deviceId) {\r\n        return this.deviceMap[deviceId] || '未知设备';\r\n    },\r\n    async fetchEnergyData() {\r\n      this.loading = true;\r\n      try {\r\n        let apiUrl = '/energy-data';\r\n        const params = {};\r\n\r\n        if (this.filters.deviceId && this.filters.startTime && this.filters.endTime) {\r\n          apiUrl = `/energy-data/device/${this.filters.deviceId}/range`;\r\n          params.startTime = this.filters.startTime;\r\n          params.endTime = this.filters.endTime;\r\n        } else if (this.filters.deviceId) {\r\n          apiUrl = `/energy-data/device/${this.filters.deviceId}`;\r\n        } else if (this.filters.startTime && this.filters.endTime) {\r\n          apiUrl = '/energy-data/range';\r\n          params.startTime = this.filters.startTime;\r\n          params.endTime = this.filters.endTime;\r\n        } else {\r\n          apiUrl = '/energy-data'; \r\n        }\r\n        \r\n        const response = await this.$http.get(apiUrl, { params });\r\n        this.energyDataList = response.data || [];\r\n      } catch (error) {\r\n        console.error(\"获取能源数据失败:\", error);\r\n        const errorMsg = error.response && error.response.data && (typeof error.response.data === 'string' ? error.response.data : error.response.data.message) \r\n                             ? (typeof error.response.data === 'string' ? error.response.data : error.response.data.message)\r\n                             : '获取能源数据失败，请稍后重试。';\r\n        this.$message.error(errorMsg);\r\n        this.energyDataList = [];\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    handleSearch() {\r\n      if (this.filters.startTime && this.filters.endTime && moment(this.filters.startTime).isAfter(moment(this.filters.endTime))) {\r\n        this.$message.error('开始时间不能晚于结束时间');\r\n        return;\r\n      }\r\n      if ((this.filters.startTime && !this.filters.endTime) || (!this.filters.startTime && this.filters.endTime)) {\r\n          this.$message.error('查询时间范围时，开始和结束时间均需选择。');\r\n          return;\r\n      }\r\n      this.fetchEnergyData();\r\n    },\r\n    resetFilters() {\r\n      this.$refs.filterFormRef.resetFields();\r\n      this.filters.deviceId = null;\r\n      this.filters.startTime = null;\r\n      this.filters.endTime = null;\r\n      this.fetchEnergyData();\r\n    },\r\n    formatDateTime(dateTimeArray) {\r\n      if (!dateTimeArray) return '';\r\n      if (Array.isArray(dateTimeArray)) {\r\n         const [year, month, day, hour, minute, second] = dateTimeArray;\r\n         return moment({ year, month: month - 1, day, hour, minute, second }).format('YYYY-MM-DD HH:mm:ss');\r\n      }\r\n      return moment(dateTimeArray).format('YYYY-MM-DD HH:mm:ss');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-data-view {\r\n  padding: 20px;\r\n}\r\n.filter-form {\r\n  margin-bottom: 20px;\r\n}\r\n.box-card {\r\n  min-height: calc(100vh - 130px);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}