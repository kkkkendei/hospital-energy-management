{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts'; // 1. Import ECharts\n\nexport default {\n  name: 'EnergyAnalysis',\n  data() {\n    return {\n      filters: {\n        deviceIds: [],\n        energyType: '',\n        timeRange: [],\n        // [startTime, endTime] as ISO strings from date picker\n        timeGranularityForTrend: 'daily' // Added for API, can be configurable\n      },\n      deviceList: [],\n      loading: false,\n      trendChartInstance: null,\n      pieChartInstance: null,\n      // Keep for now, implement later if needed\n      analysisResults: {\n        // To store all parts of the response\n        queryParameters: null,\n        overallStats: null,\n        deviceBreakdown: [],\n        energyTrend: null\n      }\n    };\n  },\n  methods: {\n    fetchDevices() {\n      this.$http.get('/api/devices').then(response => {\n        this.deviceList = response.data;\n      }).catch(error => {\n        this.$message.error('获取设备列表失败: ' + error.message);\n      });\n    },\n    validateFilters() {\n      if (!this.filters.timeRange || this.filters.timeRange.length !== 2) {\n        this.$message.error('请选择分析周期！');\n        return false;\n      }\n      // Convert to Date objects to check validity\n      const startTime = new Date(this.filters.timeRange[0]);\n      const endTime = new Date(this.filters.timeRange[1]);\n      if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\n        this.$message.error('分析周期的日期时间格式无效！');\n        return false;\n      }\n      if (startTime >= endTime) {\n        this.$message.error('开始时间必须早于结束时间！');\n        return false;\n      }\n      return true;\n    },\n    performAnalysis() {\n      if (!this.validateFilters()) {\n        return;\n      }\n      // Note: Element UI form validation (`this.$refs.filterFormRef.validate`)\n      // is useful if you have specific rules on <el-form-item prop=\"xxx\">.\n      // Here, validateFilters() handles the primary logic.\n      // If filterFormRef has rules, they will also be checked.\n      this.$refs.filterFormRef.validate(valid => {\n        if (valid) {\n          // `valid` will be true if Element UI rules (if any) pass\n          this.loading = true;\n          const params = {\n            // deviceIds should be an array of Longs, Axios handles serialization\n            deviceIds: this.filters.deviceIds.length > 0 ? this.filters.deviceIds : null,\n            // Send null if empty for backend\n            energyType: this.filters.energyType || null,\n            // Send null if empty\n            startTime: this.filters.timeRange[0],\n            // ISO String\n            endTime: this.filters.timeRange[1],\n            // ISO String\n            timeGranularityForTrend: this.filters.timeGranularityForTrend\n          };\n          console.log(\"Submitting analysis params:\", params);\n          this.$http.get('/api/energy-stats', {\n            params\n          }).then(response => {\n            if (response.data) {\n              this.analysisResults = response.data;\n              this.$message.success('能耗分析数据已获取!');\n              this.$nextTick(() => {\n                // Ensure DOM is updated before rendering charts\n                this.renderCharts();\n              });\n            } else {\n              this.$message.error('获取能耗分析数据失败: 响应为空');\n              this.clearResultsAndCharts();\n            }\n            this.loading = false;\n          }).catch(error => {\n            let errMsg = '获取能耗分析数据失败';\n            if (error.response && error.response.data) {\n              // Try to get message from Spring Boot's default error response\n              if (error.response.data.message) errMsg += `: ${error.response.data.message}`;else if (error.response.data.error) errMsg += `: ${error.response.data.error}`;\n            } else if (error.message) {\n              errMsg += `: ${error.message}`;\n            }\n            this.$message.error(errMsg);\n            this.loading = false;\n            this.clearResultsAndCharts();\n          });\n        } else {\n          // This part is for Element UI's own validation messages if form rules are set\n          // this.$message.error('请检查筛选条件中的错误!'); // Typically Element UI shows errors directly on fields\n          return false;\n        }\n      });\n    },\n    clearResultsAndCharts() {\n      this.analysisResults = {\n        queryParameters: null,\n        overallStats: null,\n        deviceBreakdown: [],\n        energyTrend: null\n      };\n      if (this.trendChartInstance) {\n        this.trendChartInstance.clear();\n        // Optional: Dispose and nullify if you want to completely re-init next time\n        // this.trendChartInstance.dispose();\n        // this.trendChartInstance = null;\n      }\n      // if (this.pieChartInstance) { this.pieChartInstance.clear(); }\n    },\n    resetFilters() {\n      // Check if filterFormRef is available before calling resetFields\n      if (this.$refs.filterFormRef) {\n        this.$refs.filterFormRef.resetFields();\n      }\n      this.filters.deviceIds = [];\n      this.filters.energyType = '';\n      this.filters.timeRange = [];\n      this.filters.timeGranularityForTrend = 'daily';\n      this.clearResultsAndCharts();\n    },\n    renderCharts() {\n      if (!this.$refs.trendChart) {\n        // Ensure the ref is available\n        console.warn(\"Trend chart ref not found, cannot render.\");\n        return;\n      }\n      if (!this.analysisResults || !this.analysisResults.energyTrend || !this.analysisResults.energyTrend.timeLabels) {\n        if (this.trendChartInstance) this.trendChartInstance.clear();\n        console.log(\"No trend data to render or chart instance not ready.\");\n        return;\n      }\n      const trendData = this.analysisResults.energyTrend;\n      if (!this.trendChartInstance) {\n        try {\n          this.trendChartInstance = echarts.init(this.$refs.trendChart);\n        } catch (e) {\n          console.error(\"Failed to initialize trend chart:\", e);\n          this.$message.error(\"图表初始化失败，请刷新页面或检查控制台。\");\n          return;\n        }\n      }\n      const yAxisUnit = trendData.datasets && trendData.datasets.length > 0 && trendData.datasets[0].unit ? trendData.datasets[0].unit : '';\n      const trendOption = {\n        title: {\n          text: '能耗趋势图',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            // Custom tooltip formatter\n            let tooltipHtml = params[0].name + '<br/>'; // Time label\n            params.forEach(item => {\n              tooltipHtml += `${item.marker} ${item.seriesName}: ${item.value != null ? item.value.toFixed(2) : 'N/A'} ${yAxisUnit}<br/>`;\n            });\n            return tooltipHtml;\n          }\n        },\n        legend: {\n          data: trendData.datasets ? trendData.datasets.map(ds => ds.label) : [],\n          top: 'bottom'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '10%',\n          // Adjusted for legend at bottom\n          containLabel: true\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {\n              title: '保存为图片'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: trendData.timeLabels || []\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: `{value} ${yAxisUnit}`\n          }\n        },\n        dataZoom: [\n        // Add data zoom for better navigation on large datasets\n        {\n          type: 'slider',\n          start: 0,\n          end: 100,\n          xAxisIndex: 0,\n          filterMode: 'empty'\n        }, {\n          type: 'inside',\n          start: 0,\n          end: 100,\n          xAxisIndex: 0,\n          filterMode: 'empty'\n        }],\n        series: trendData.datasets ? trendData.datasets.map(ds => ({\n          name: ds.label,\n          type: 'line',\n          data: ds.data || [],\n          smooth: true,\n          itemStyle: {/*Можно добавить стили для линий/точек*/},\n          lineStyle: {/*Можно добавить стили для линий*/}\n        })) : []\n      };\n      this.trendChartInstance.setOption(trendOption, true); // true to not merge with previous options\n    },\n    handleResize() {\n      this.$nextTick(() => {\n        // Ensure resize happens after any DOM updates\n        if (this.trendChartInstance) {\n          this.trendChartInstance.resize();\n        }\n        // if (this.pieChartInstance) { this.pieChartInstance.resize(); }\n      });\n    }\n  },\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n    // Consider fetching devices only if deviceList is empty or on demand\n    if (this.deviceList.length === 0) {\n      this.fetchDevices();\n    }\n  },\n  created() {\n    // fetchDevices moved to mounted to ensure $http is available if it relies on global setup.\n    // However, typically it's fine in created(). If issues, move back to created() or ensure $http setup.\n  },\n  beforeDestroy() {\n    if (this.trendChartInstance) {\n      this.trendChartInstance.dispose();\n      this.trendChartInstance = null;\n    }\n    // if (this.pieChartInstance) { this.pieChartInstance.dispose(); this.pieChartInstance = null; }\n    window.removeEventListener('resize', this.handleResize);\n  }\n};","map":{"version":3,"names":["echarts","name","data","filters","deviceIds","energyType","timeRange","timeGranularityForTrend","deviceList","loading","trendChartInstance","pieChartInstance","analysisResults","queryParameters","overallStats","deviceBreakdown","energyTrend","methods","fetchDevices","$http","get","then","response","catch","error","$message","message","validateFilters","length","startTime","Date","endTime","isNaN","getTime","performAnalysis","$refs","filterFormRef","validate","valid","params","console","log","success","$nextTick","renderCharts","clearResultsAndCharts","errMsg","clear","resetFilters","resetFields","trendChart","warn","timeLabels","trendData","init","e","yAxisUnit","datasets","unit","trendOption","title","text","left","tooltip","trigger","formatter","tooltipHtml","forEach","item","marker","seriesName","value","toFixed","legend","map","ds","label","top","grid","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","type","boundaryGap","yAxis","axisLabel","dataZoom","start","end","xAxisIndex","filterMode","series","smooth","itemStyle","lineStyle","setOption","handleResize","resize","mounted","window","addEventListener","created","beforeDestroy","dispose","removeEventListener"],"sources":["src/views/EnergyAnalysis.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-analysis-container\">\r\n    <el-card class=\"box-card filter-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能耗分析筛选</span>\r\n      </div>\r\n\r\n      <!-- Filter Section -->\r\n      <el-form :inline=\"true\" :model=\"filters\" class=\"filter-form\" ref=\"filterFormRef\">\r\n        <el-form-item label=\"选择设备\" prop=\"deviceIds\">\r\n          <el-select v-model=\"filters.deviceIds\" multiple placeholder=\"可多选，或不选代表所有设备\" style=\"width: 280px;\" clearable>\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + (device.model ? ' (' + device.model + ')' : '')\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"能源类型\" prop=\"energyType\">\r\n           <el-input v-model=\"filters.energyType\" placeholder=\"例如: 电能, 水 (可选)\" style=\"width: 180px;\" clearable></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"分析周期\" prop=\"timeRange\" required>\r\n          <el-date-picker\r\n            v-model=\"filters.timeRange\"\r\n            type=\"datetimerange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期时间\"\r\n            end-placeholder=\"结束日期时间\"\r\n            format=\"yyyy-MM-dd HH:mm:ss\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\" \r\n            :default-time=\"['00:00:00', '23:59:59']\"\r\n            style=\"width: 370px;\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"趋势粒度\" prop=\"timeGranularityForTrend\">\r\n            <el-select v-model=\"filters.timeGranularityForTrend\" placeholder=\"选择趋势图时间粒度\" style=\"width: 150px;\">\r\n                <el-option label=\"每日\" value=\"daily\"></el-option>\r\n                <el-option label=\"每小时\" value=\"hourly\"></el-option>\r\n            </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"performAnalysis\" :loading=\"loading\">开始分析</el-button>\r\n          <el-button icon=\"el-icon-refresh\" @click=\"resetFilters\">重置筛选</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <!-- Results Display Area -->\r\n    <div v-if=\"loading\" class=\"loading-overlay\">\r\n        <el-spinner text=\"正在加载分析结果...\"></el-spinner>\r\n    </div>\r\n\r\n    <div v-if=\"!loading && analysisResults.overallStats\">\r\n        <!-- Overall Stats Summary -->\r\n        <el-card class=\"box-card stats-summary-card\">\r\n            <div slot=\"header\" class=\"clearfix\">\r\n                <span>总体能耗摘要</span>\r\n            </div>\r\n            <el-descriptions :column=\"2\" border>\r\n                <el-descriptions-item label=\"总能耗\">\r\n                    {{ analysisResults.overallStats.totalEnergyConsumed != null ? analysisResults.overallStats.totalEnergyConsumed.toFixed(2) : 'N/A' }} \r\n                    {{ analysisResults.overallStats.unit }}\r\n                </el-descriptions-item>\r\n                <el-descriptions-item label=\"平均能耗 (每条记录)\">\r\n                    {{ analysisResults.overallStats.averageEnergyConsumedPerRecord != null ? analysisResults.overallStats.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A' }} \r\n                    {{ analysisResults.overallStats.unit }}\r\n                </el-descriptions-item>\r\n                <el-descriptions-item label=\"数据记录数\">\r\n                    {{ analysisResults.overallStats.numberOfRecords != null ? analysisResults.overallStats.numberOfRecords : 'N/A' }}\r\n                </el-descriptions-item>\r\n                 <el-descriptions-item label=\"查询参数\">\r\n                    设备: {{ analysisResults.queryParameters.deviceIds && analysisResults.queryParameters.deviceIds.length > 0 ? analysisResults.queryParameters.deviceIds.join(', ') : '全部' }} <br/>\r\n                    类型: {{ analysisResults.queryParameters.energyType || '全部' }} <br/>\r\n                    时间: {{ new Date(analysisResults.queryParameters.startTime).toLocaleString() }} - {{ new Date(analysisResults.queryParameters.endTime).toLocaleString() }}\r\n                </el-descriptions-item>\r\n            </el-descriptions>\r\n        </el-card>\r\n\r\n        <!-- Chart Display Area -->\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"24\"> <!-- Changed to full width for single trend chart -->\r\n              <el-card shadow=\"hover\" class=\"chart-card\">\r\n                <!-- Trend chart will be rendered here by ECharts -->\r\n                <div ref=\"trendChart\" style=\"height: 450px; width: 100%;\"></div>\r\n              </el-card>\r\n            </el-col>\r\n            <!-- Pie chart column can be added back if needed\r\n            <el-col :span=\"12\">\r\n              <el-card shadow=\"hover\" class=\"chart-card\">\r\n                <div slot=\"header\">能耗占比图 (示例)</div>\r\n                <div ref=\"pieChart\" style=\"height: 400px;\"></div>\r\n              </el-card>\r\n            </el-col>\r\n            -->\r\n        </el-row>\r\n        \r\n        <!-- Device Breakdown Table -->\r\n        <el-card class=\"box-card device-breakdown-card\" v-if=\"analysisResults.deviceBreakdown && analysisResults.deviceBreakdown.length > 0\">\r\n            <div slot=\"header\" class=\"clearfix\">\r\n                <span>各设备能耗细分</span>\r\n            </div>\r\n            <el-table :data=\"analysisResults.deviceBreakdown\" stripe style=\"width: 100%\" border>\r\n                <el-table-column prop=\"deviceName\" label=\"设备名称\" sortable></el-table-column>\r\n                <el-table-column prop=\"deviceId\" label=\"设备ID\" sortable width=\"120\"></el-table-column>\r\n                <el-table-column label=\"总能耗\" sortable>\r\n                    <template slot-scope=\"scope\">\r\n                        {{ scope.row.totalEnergyConsumed != null ? scope.row.totalEnergyConsumed.toFixed(2) : 'N/A' }} {{ scope.row.unit }}\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"平均能耗 (每条记录)\" sortable>\r\n                     <template slot-scope=\"scope\">\r\n                        {{ scope.row.averageEnergyConsumedPerRecord != null ? scope.row.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A' }} {{ scope.row.unit }}\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"numberOfRecords\" label=\"数据记录数\" sortable width=\"150\"></el-table-column>\r\n            </el-table>\r\n        </el-card>\r\n         <el-alert\r\n            v-else-if=\"!loading && analysisResults.overallStats && (!analysisResults.deviceBreakdown || analysisResults.deviceBreakdown.length === 0)\"\r\n            title=\"没有查询到符合条件的设备细分数据\"\r\n            type=\"info\"\r\n            show-icon\r\n            :closable=\"false\"\r\n            style=\"margin-top: 20px;\">\r\n        </el-alert>\r\n    </div>\r\n    <el-empty v-if=\"!loading && !analysisResults.overallStats\" description=\"暂无分析数据，请选择筛选条件后点击\"开始分析\"\"></el-empty>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'; // 1. Import ECharts\r\n\r\nexport default {\r\n  name: 'EnergyAnalysis',\r\n  data() {\r\n    return {\r\n      filters: {\r\n        deviceIds: [],\r\n        energyType: '',\r\n        timeRange: [], // [startTime, endTime] as ISO strings from date picker\r\n        timeGranularityForTrend: 'daily' // Added for API, can be configurable\r\n      },\r\n      deviceList: [],\r\n      loading: false,\r\n      trendChartInstance: null,\r\n      pieChartInstance: null, // Keep for now, implement later if needed\r\n      analysisResults: { // To store all parts of the response\r\n        queryParameters: null,\r\n        overallStats: null,\r\n        deviceBreakdown: [],\r\n        energyTrend: null\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    fetchDevices() {\r\n      this.$http.get('/api/devices')\r\n        .then(response => {\r\n          this.deviceList = response.data;\r\n        })\r\n        .catch(error => {\r\n          this.$message.error('获取设备列表失败: ' + error.message);\r\n        });\r\n    },\r\n    validateFilters() {\r\n        if (!this.filters.timeRange || this.filters.timeRange.length !== 2) {\r\n            this.$message.error('请选择分析周期！');\r\n            return false;\r\n        }\r\n        // Convert to Date objects to check validity\r\n        const startTime = new Date(this.filters.timeRange[0]);\r\n        const endTime = new Date(this.filters.timeRange[1]);\r\n\r\n        if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\r\n            this.$message.error('分析周期的日期时间格式无效！');\r\n            return false;\r\n        }\r\n        \r\n        if (startTime >= endTime) {\r\n            this.$message.error('开始时间必须早于结束时间！');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    performAnalysis() {\r\n      if (!this.validateFilters()) {\r\n          return;\r\n      }\r\n      // Note: Element UI form validation (`this.$refs.filterFormRef.validate`)\r\n      // is useful if you have specific rules on <el-form-item prop=\"xxx\">.\r\n      // Here, validateFilters() handles the primary logic.\r\n      // If filterFormRef has rules, they will also be checked.\r\n      this.$refs.filterFormRef.validate((valid) => {\r\n        if (valid) { // `valid` will be true if Element UI rules (if any) pass\r\n          this.loading = true;\r\n          const params = {\r\n            // deviceIds should be an array of Longs, Axios handles serialization\r\n            deviceIds: this.filters.deviceIds.length > 0 ? this.filters.deviceIds : null, // Send null if empty for backend\r\n            energyType: this.filters.energyType || null, // Send null if empty\r\n            startTime: this.filters.timeRange[0], // ISO String\r\n            endTime: this.filters.timeRange[1],   // ISO String\r\n            timeGranularityForTrend: this.filters.timeGranularityForTrend\r\n          };\r\n\r\n          console.log(\"Submitting analysis params:\", params);\r\n\r\n          this.$http.get('/api/energy-stats', { params })\r\n            .then(response => {\r\n              if (response.data) {\r\n                this.analysisResults = response.data;\r\n                this.$message.success('能耗分析数据已获取!');\r\n                this.$nextTick(() => { // Ensure DOM is updated before rendering charts\r\n                    this.renderCharts();\r\n                });\r\n              } else {\r\n                this.$message.error('获取能耗分析数据失败: 响应为空');\r\n                this.clearResultsAndCharts();\r\n              }\r\n              this.loading = false;\r\n            })\r\n            .catch(error => {\r\n              let errMsg = '获取能耗分析数据失败';\r\n              if (error.response && error.response.data) {\r\n                // Try to get message from Spring Boot's default error response\r\n                if (error.response.data.message) errMsg += `: ${error.response.data.message}`;\r\n                else if (error.response.data.error) errMsg += `: ${error.response.data.error}`;\r\n              } else if (error.message) {\r\n                errMsg += `: ${error.message}`;\r\n              }\r\n              this.$message.error(errMsg);\r\n              this.loading = false;\r\n              this.clearResultsAndCharts();\r\n            });\r\n        } else {\r\n          // This part is for Element UI's own validation messages if form rules are set\r\n          // this.$message.error('请检查筛选条件中的错误!'); // Typically Element UI shows errors directly on fields\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    clearResultsAndCharts() {\r\n        this.analysisResults = {\r\n            queryParameters: null,\r\n            overallStats: null,\r\n            deviceBreakdown: [],\r\n            energyTrend: null\r\n        };\r\n        if (this.trendChartInstance) {\r\n            this.trendChartInstance.clear();\r\n            // Optional: Dispose and nullify if you want to completely re-init next time\r\n            // this.trendChartInstance.dispose();\r\n            // this.trendChartInstance = null;\r\n        }\r\n        // if (this.pieChartInstance) { this.pieChartInstance.clear(); }\r\n    },\r\n    resetFilters() {\r\n      // Check if filterFormRef is available before calling resetFields\r\n      if (this.$refs.filterFormRef) {\r\n        this.$refs.filterFormRef.resetFields();\r\n      }\r\n      this.filters.deviceIds = [];\r\n      this.filters.energyType = '';\r\n      this.filters.timeRange = [];\r\n      this.filters.timeGranularityForTrend = 'daily';\r\n      this.clearResultsAndCharts();\r\n    },\r\n    renderCharts() {\r\n      if (!this.$refs.trendChart) { // Ensure the ref is available\r\n          console.warn(\"Trend chart ref not found, cannot render.\");\r\n          return;\r\n      }\r\n      if (!this.analysisResults || !this.analysisResults.energyTrend || !this.analysisResults.energyTrend.timeLabels) {\r\n        if (this.trendChartInstance) this.trendChartInstance.clear();\r\n        console.log(\"No trend data to render or chart instance not ready.\");\r\n        return;\r\n      }\r\n\r\n      const trendData = this.analysisResults.energyTrend;\r\n      \r\n      if (!this.trendChartInstance) {\r\n        try {\r\n            this.trendChartInstance = echarts.init(this.$refs.trendChart);\r\n        } catch (e) {\r\n            console.error(\"Failed to initialize trend chart:\", e);\r\n            this.$message.error(\"图表初始化失败，请刷新页面或检查控制台。\");\r\n            return;\r\n        }\r\n      }\r\n      \r\n      const yAxisUnit = trendData.datasets && trendData.datasets.length > 0 && trendData.datasets[0].unit \r\n                        ? trendData.datasets[0].unit \r\n                        : '';\r\n\r\n      const trendOption = {\r\n        title: {\r\n          text: '能耗趋势图',\r\n          left: 'center'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: (params) => { // Custom tooltip formatter\r\n            let tooltipHtml = params[0].name + '<br/>'; // Time label\r\n            params.forEach(item => {\r\n              tooltipHtml += `${item.marker} ${item.seriesName}: ${item.value != null ? item.value.toFixed(2) : 'N/A'} ${yAxisUnit}<br/>`;\r\n            });\r\n            return tooltipHtml;\r\n          }\r\n        },\r\n        legend: {\r\n          data: trendData.datasets ? trendData.datasets.map(ds => ds.label) : [],\r\n          top: 'bottom'\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '10%', // Adjusted for legend at bottom\r\n          containLabel: true\r\n        },\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: { title: '保存为图片' }\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: trendData.timeLabels || []\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLabel: {\r\n            formatter: `{value} ${yAxisUnit}`\r\n          }\r\n        },\r\n        dataZoom: [ // Add data zoom for better navigation on large datasets\r\n            {\r\n                type: 'slider',\r\n                start: 0,\r\n                end: 100,\r\n                xAxisIndex: 0,\r\n                filterMode: 'empty'\r\n            },\r\n            {\r\n                type: 'inside',\r\n                start: 0,\r\n                end: 100,\r\n                xAxisIndex: 0,\r\n                filterMode: 'empty'\r\n            }\r\n        ],\r\n        series: trendData.datasets ? trendData.datasets.map(ds => ({\r\n          name: ds.label,\r\n          type: 'line',\r\n          data: ds.data || [],\r\n          smooth: true,\r\n          itemStyle: { /*Можно добавить стили для линий/точек*/ },\r\n          lineStyle: { /*Можно добавить стили для линий*/ }\r\n        })) : []\r\n      };\r\n      this.trendChartInstance.setOption(trendOption, true); // true to not merge with previous options\r\n    },\r\n    handleResize() { \r\n        this.$nextTick(() => { // Ensure resize happens after any DOM updates\r\n            if (this.trendChartInstance) {\r\n                this.trendChartInstance.resize();\r\n            }\r\n            // if (this.pieChartInstance) { this.pieChartInstance.resize(); }\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n    // Consider fetching devices only if deviceList is empty or on demand\r\n    if(this.deviceList.length === 0) {\r\n        this.fetchDevices();\r\n    }\r\n  },\r\n  created() {\r\n    // fetchDevices moved to mounted to ensure $http is available if it relies on global setup.\r\n    // However, typically it's fine in created(). If issues, move back to created() or ensure $http setup.\r\n  },\r\n  beforeDestroy() {\r\n    if (this.trendChartInstance) {\r\n      this.trendChartInstance.dispose();\r\n      this.trendChartInstance = null;\r\n    }\r\n    // if (this.pieChartInstance) { this.pieChartInstance.dispose(); this.pieChartInstance = null; }\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-analysis-container {\r\n  padding: 20px;\r\n}\r\n.filter-card, .stats-summary-card, .chart-card, .device-breakdown-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-form .el-form-item {\r\n  margin-bottom: 10px; /* Reduce bottom margin for denser form */\r\n}\r\n\r\n/* Make sure chart resizes correctly within its container */\r\n.chart-card div[ref=\"trendChart\"] {\r\n    width: 100%; /* Ensure ECharts takes full width of its parent */\r\n}\r\n\r\n.loading-overlay {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    z-index: 2000; /* High z-index to overlay other content */\r\n}\r\n.el-descriptions {\r\n    margin-top: 15px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}