{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\nconst authModule = {\n  namespaced: true,\n  state: {\n    user: null,\n    // 可以存储用户信息对象\n    token: localStorage.getItem('user-token') || ''\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      state.token = token;\n      localStorage.setItem('user-token', token); // 持久化token\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // 设置axios请求头\n    },\n    CLEAR_TOKEN(state) {\n      state.token = '';\n      localStorage.removeItem('user-token');\n      delete axios.defaults.headers.common['Authorization'];\n    },\n    SET_USER(state, user) {\n      state.user = user;\n      // 你也可以将用户信息存储在localStorage，但要注意敏感信息\n    },\n    CLEAR_USER(state) {\n      state.user = null;\n    }\n  },\n  actions: {\n    // 登录action\n    async login({\n      commit\n    }, credentials) {\n      try {\n        // const response = await axios.post('/auth/login', credentials);\n        // 模拟API调用成功\n        const response = await new Promise(resolve => setTimeout(() => resolve({\n          data: {\n            token: 'fake-jwt-token-for-' + credentials.username,\n            user: {\n              username: credentials.username,\n              role: 'USER'\n            } // 模拟用户信息\n          }\n        }), 500));\n        const token = response.data.token;\n        const user = response.data.user;\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n        return Promise.resolve(user);\n      } catch (error) {\n        commit('CLEAR_TOKEN');\n        commit('CLEAR_USER');\n        return Promise.reject(error);\n      }\n    },\n    // 注册action (简单示例)\n    async register(_context, userData) {\n      try {\n        // const response = await axios.post('/auth/register', userData);\n        // 模拟API调用成功\n        console.log('Registering user:', userData);\n        await new Promise(resolve => setTimeout(() => resolve({\n          data: {\n            message: 'Registration successful'\n          }\n        }), 500));\n\n        // 注册成功后可以考虑直接登录\n        // await commit('SET_TOKEN', tokenFromSomewhere); // 如果要登录，需要token\n        // await commit('SET_USER', registeredUser);\n        return Promise.resolve();\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    },\n    // 登出action\n    logout({\n      commit\n    }) {\n      commit('CLEAR_TOKEN');\n      commit('CLEAR_USER');\n      // 可以在这里添加其他清理操作，例如清除axios的Authorization头部\n      // （已经在CLEAR_TOKEN mutation中处理了）\n      return Promise.resolve();\n    },\n    // 可选: 应用加载时尝试从token获取用户信息\n    async fetchUser({\n      commit,\n      state\n    }) {\n      if (state.token && !state.user) {\n        try {\n          // const response = await axios.get('/auth/me'); // 假设有获取当前用户信息的接口\n          // commit('SET_USER', response.data);\n          // 模拟获取用户信息\n          const usernameFromToken = state.token.replace('fake-jwt-token-for-', '');\n          commit('SET_USER', {\n            username: usernameFromToken,\n            role: 'USER'\n          });\n        } catch (error) {\n          commit('CLEAR_TOKEN'); // token无效则清除\n          commit('CLEAR_USER');\n        }\n      }\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    currentUser: state => state.user,\n    userRole: state => state.user ? state.user.role : null\n  }\n};\nexport default new Vuex.Store({\n  modules: {\n    auth: authModule\n  }\n  // 你可以在这里添加更多的模块\n});","map":{"version":3,"names":["Vue","Vuex","axios","use","authModule","namespaced","state","user","token","localStorage","getItem","mutations","SET_TOKEN","setItem","defaults","headers","common","CLEAR_TOKEN","removeItem","SET_USER","CLEAR_USER","actions","login","commit","credentials","response","Promise","resolve","setTimeout","data","username","role","error","reject","register","_context","userData","console","log","message","logout","fetchUser","usernameFromToken","replace","getters","isAuthenticated","currentUser","userRole","Store","modules","auth"],"sources":["C:/Users/吴泽宇/Desktop/医院智慧能源管理系统/hospital-energy-management/frontend/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport axios from 'axios';\r\n\r\nVue.use(Vuex)\r\n\r\nconst authModule = {\r\n  namespaced: true,\r\n  state: {\r\n    user: null, // 可以存储用户信息对象\r\n    token: localStorage.getItem('user-token') || ''\r\n  },\r\n  mutations: {\r\n    SET_TOKEN(state, token) {\r\n      state.token = token;\r\n      localStorage.setItem('user-token', token); // 持久化token\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // 设置axios请求头\r\n    },\r\n    CLEAR_TOKEN(state) {\r\n      state.token = '';\r\n      localStorage.removeItem('user-token');\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    },\r\n    SET_USER(state, user) {\r\n      state.user = user;\r\n      // 你也可以将用户信息存储在localStorage，但要注意敏感信息\r\n    },\r\n    CLEAR_USER(state) {\r\n      state.user = null;\r\n    }\r\n  },\r\n  actions: {\r\n    // 登录action\r\n    async login({ commit }, credentials) {\r\n      try {\r\n        // const response = await axios.post('/auth/login', credentials);\r\n        // 模拟API调用成功\r\n        const response = await new Promise(resolve => setTimeout(() => resolve({\r\n          data: {\r\n            token: 'fake-jwt-token-for-' + credentials.username,\r\n            user: { username: credentials.username, role: 'USER' } // 模拟用户信息\r\n          }\r\n        }), 500));\r\n\r\n        const token = response.data.token;\r\n        const user = response.data.user;\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n        return Promise.resolve(user);\r\n      } catch (error) {\r\n        commit('CLEAR_TOKEN');\r\n        commit('CLEAR_USER');\r\n        return Promise.reject(error);\r\n      }\r\n    },\r\n    // 注册action (简单示例)\r\n    async register(_context, userData) {\r\n      try {\r\n        // const response = await axios.post('/auth/register', userData);\r\n        // 模拟API调用成功\r\n        console.log('Registering user:', userData);\r\n        await new Promise(resolve => setTimeout(() => resolve({ data: { message: 'Registration successful'} }), 500));\r\n\r\n        // 注册成功后可以考虑直接登录\r\n        // await commit('SET_TOKEN', tokenFromSomewhere); // 如果要登录，需要token\r\n        // await commit('SET_USER', registeredUser);\r\n        return Promise.resolve();\r\n      } catch (error) {\r\n        return Promise.reject(error);\r\n      }\r\n    },\r\n    // 登出action\r\n    logout({ commit }) {\r\n      commit('CLEAR_TOKEN');\r\n      commit('CLEAR_USER');\r\n      // 可以在这里添加其他清理操作，例如清除axios的Authorization头部\r\n      // （已经在CLEAR_TOKEN mutation中处理了）\r\n      return Promise.resolve();\r\n    },\r\n    // 可选: 应用加载时尝试从token获取用户信息\r\n    async fetchUser({ commit, state }) {\r\n      if (state.token && !state.user) {\r\n        try {\r\n          // const response = await axios.get('/auth/me'); // 假设有获取当前用户信息的接口\r\n          // commit('SET_USER', response.data);\r\n          // 模拟获取用户信息\r\n          const usernameFromToken = state.token.replace('fake-jwt-token-for-','');\r\n          commit('SET_USER', { username: usernameFromToken, role: 'USER' });\r\n        } catch (error) {\r\n          commit('CLEAR_TOKEN'); // token无效则清除\r\n          commit('CLEAR_USER');\r\n        }\r\n      }\r\n    }\r\n  },\r\n  getters: {\r\n    isAuthenticated: state => !!state.token,\r\n    currentUser: state => state.user,\r\n    userRole: state => state.user ? state.user.role : null\r\n  }\r\n}\r\n\r\nexport default new Vuex.Store({\r\n  modules: {\r\n    auth: authModule\r\n  }\r\n  // 你可以在这里添加更多的模块\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}