{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nexport default {\n  name: 'EnergyDataView',\n  data() {\n    return {\n      filters: {\n        deviceId: null,\n        dateRange: [] // [startDate, endDate]\n      },\n      deviceList: [],\n      energyDataList: [],\n      loading: false\n    };\n  },\n  methods: {\n    fetchDevices() {\n      this.$http.get('/api/devices').then(response => {\n        this.deviceList = response.data;\n      }).catch(error => {\n        this.$message.error('获取设备列表失败: ' + error.message);\n      });\n    },\n    fetchEnergyData() {\n      this.loading = true;\n      let params = {};\n      if (this.filters.deviceId) {\n        params.deviceId = this.filters.deviceId;\n      }\n      if (this.filters.dateRange && this.filters.dateRange.length === 2) {\n        params.startTime = this.filters.dateRange[0];\n        params.endTime = this.filters.dateRange[1];\n      }\n      this.$http.get('/api/energy-data', {\n        params\n      }).then(response => {\n        this.energyDataList = response.data;\n        this.loading = false;\n      }).catch(error => {\n        this.loading = false;\n        this.$message.error('获取能源数据失败: ' + error.message);\n      });\n    },\n    getDeviceName(deviceId) {\n      const device = this.deviceList.find(d => d.id === deviceId);\n      return device ? device.name : '未知设备';\n    },\n    formatDateTime(dateTimeStr) {\n      if (!dateTimeStr) return '';\n      try {\n        // Assuming dateTimeStr is ISO 8601 like \"2023-10-27T10:30:00\"\n        const date = new Date(dateTimeStr);\n        if (isNaN(date.getTime())) {\n          // Handle cases where date string might not be directly parsable by new Date()\n          // For example, if it has a Z or timezone offset that JS new Date() handles differently across browsers\n          // Or if it's just not a valid date string.\n          // A more robust solution might involve a date library like Moment.js or date-fns if issues persist.\n          return dateTimeStr; // Fallback to original string if parsing fails\n        }\n        // Simple formatting, customize as needed\n        const year = date.getFullYear();\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const day = date.getDate().toString().padStart(2, '0');\n        const hours = date.getHours().toString().padStart(2, '0');\n        const minutes = date.getMinutes().toString().padStart(2, '0');\n        const seconds = date.getSeconds().toString().padStart(2, '0');\n        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n      } catch (e) {\n        console.warn('Error formatting date:', dateTimeStr, e);\n        return dateTimeStr; // Fallback if any error during formatting\n      }\n    }\n  },\n  created() {\n    this.fetchDevices();\n    this.fetchEnergyData(); // Initial fetch\n  }\n};","map":{"version":3,"names":["name","data","filters","deviceId","dateRange","deviceList","energyDataList","loading","methods","fetchDevices","$http","get","then","response","catch","error","$message","message","fetchEnergyData","params","length","startTime","endTime","getDeviceName","device","find","d","id","formatDateTime","dateTimeStr","date","Date","isNaN","getTime","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","e","console","warn","created"],"sources":["src/views/EnergyDataView.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-data-view-container\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能源数据查询</span>\r\n      </div>\r\n\r\n      <!-- Filter Section -->\r\n      <el-form :inline=\"true\" :model=\"filters\" class=\"filter-form\">\r\n        <el-form-item label=\"选择设备\">\r\n          <el-select v-model=\"filters.deviceId\" placeholder=\"全部设备\" clearable @clear=\"filters.deviceId = null\">\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + ' (' + device.model + ')'\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"日期范围\">\r\n          <el-date-picker\r\n            v-model=\"filters.dateRange\"\r\n            type=\"datetimerange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期时间\"\r\n            end-placeholder=\"结束日期时间\"\r\n            format=\"yyyy-MM-dd HH:mm:ss\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"fetchEnergyData\">查询</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <!-- Data Table -->\r\n      <el-table\r\n        :data=\"energyDataList\"\r\n        v-loading=\"loading\"\r\n        style=\"width: 100%\"\r\n        border>\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" sortable></el-table-column>\r\n        <el-table-column prop=\"deviceId\" label=\"设备ID\" width=\"100\" sortable></el-table-column>\r\n        <el-table-column label=\"设备名称\" width=\"180\">\r\n            <template slot-scope=\"scope\">\r\n                {{ getDeviceName(scope.row.deviceId) }}\r\n            </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"recordTime\" label=\"记录时间\" width=\"200\" sortable>\r\n          <template slot-scope=\"scope\">\r\n            {{ formatDateTime(scope.row.recordTime) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"energyValue\" label=\"能耗值\" width=\"120\" sortable></el-table-column>\r\n        <el-table-column prop=\"energyUnit\" label=\"单位\" width=\"100\"></el-table-column>\r\n        <el-table-column prop=\"notes\" label=\"备注\" min-width=\"200\"></el-table-column>\r\n      </el-table>\r\n\r\n      <!-- Pagination (Optional, implement if needed) -->\r\n      <!-- <el-pagination layout=\"prev, pager, next\" :total=\"50\"></el-pagination> --> \r\n\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'EnergyDataView',\r\n  data() {\r\n    return {\r\n      filters: {\r\n        deviceId: null,\r\n        dateRange: [] // [startDate, endDate]\r\n      },\r\n      deviceList: [],\r\n      energyDataList: [],\r\n      loading: false\r\n    };\r\n  },\r\n  methods: {\r\n    fetchDevices() {\r\n      this.$http.get('/api/devices')\r\n        .then(response => {\r\n          this.deviceList = response.data;\r\n        })\r\n        .catch(error => {\r\n          this.$message.error('获取设备列表失败: ' + error.message);\r\n        });\r\n    },\r\n    fetchEnergyData() {\r\n      this.loading = true;\r\n      let params = {};\r\n      if (this.filters.deviceId) {\r\n        params.deviceId = this.filters.deviceId;\r\n      }\r\n      if (this.filters.dateRange && this.filters.dateRange.length === 2) {\r\n        params.startTime = this.filters.dateRange[0];\r\n        params.endTime = this.filters.dateRange[1];\r\n      }\r\n\r\n      this.$http.get('/api/energy-data', { params })\r\n        .then(response => {\r\n          this.energyDataList = response.data;\r\n          this.loading = false;\r\n        })\r\n        .catch(error => {\r\n          this.loading = false;\r\n          this.$message.error('获取能源数据失败: ' + error.message);\r\n        });\r\n    },\r\n    getDeviceName(deviceId) {\r\n      const device = this.deviceList.find(d => d.id === deviceId);\r\n      return device ? device.name : '未知设备';\r\n    },\r\n    formatDateTime(dateTimeStr) {\r\n      if (!dateTimeStr) return '';\r\n      try {\r\n        // Assuming dateTimeStr is ISO 8601 like \"2023-10-27T10:30:00\"\r\n        const date = new Date(dateTimeStr);\r\n        if (isNaN(date.getTime())) {\r\n            // Handle cases where date string might not be directly parsable by new Date()\r\n            // For example, if it has a Z or timezone offset that JS new Date() handles differently across browsers\r\n            // Or if it's just not a valid date string.\r\n            // A more robust solution might involve a date library like Moment.js or date-fns if issues persist.\r\n            return dateTimeStr; // Fallback to original string if parsing fails\r\n        }\r\n        // Simple formatting, customize as needed\r\n        const year = date.getFullYear();\r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n        const day = date.getDate().toString().padStart(2, '0');\r\n        const hours = date.getHours().toString().padStart(2, '0');\r\n        const minutes = date.getMinutes().toString().padStart(2, '0');\r\n        const seconds = date.getSeconds().toString().padStart(2, '0');\r\n        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n      } catch (e) {\r\n        console.warn('Error formatting date:', dateTimeStr, e);\r\n        return dateTimeStr; // Fallback if any error during formatting\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDevices();\r\n    this.fetchEnergyData(); // Initial fetch\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-data-view-container {\r\n  padding: 20px;\r\n}\r\n.filter-form {\r\n  margin-bottom: 20px;\r\n}\r\n.el-select, .el-date-picker {\r\n  width: 100%; /* Ensure selects and pickers take full width in their form item */\r\n}\r\n/* Adjust width for inline form items if needed */\r\n.el-form--inline .el-form-item {\r\n  margin-right: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;AAkEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;QACAC,QAAA;QACAC,SAAA;MACA;MACAC,UAAA;MACAC,cAAA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAA;MACA,KAAAC,KAAA,CAAAC,GAAA,iBACAC,IAAA,CAAAC,QAAA;QACA,KAAAR,UAAA,GAAAQ,QAAA,CAAAZ,IAAA;MACA,GACAa,KAAA,CAAAC,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA,gBAAAA,KAAA,CAAAE,OAAA;MACA;IACA;IACAC,gBAAA;MACA,KAAAX,OAAA;MACA,IAAAY,MAAA;MACA,SAAAjB,OAAA,CAAAC,QAAA;QACAgB,MAAA,CAAAhB,QAAA,QAAAD,OAAA,CAAAC,QAAA;MACA;MACA,SAAAD,OAAA,CAAAE,SAAA,SAAAF,OAAA,CAAAE,SAAA,CAAAgB,MAAA;QACAD,MAAA,CAAAE,SAAA,QAAAnB,OAAA,CAAAE,SAAA;QACAe,MAAA,CAAAG,OAAA,QAAApB,OAAA,CAAAE,SAAA;MACA;MAEA,KAAAM,KAAA,CAAAC,GAAA;QAAAQ;MAAA,GACAP,IAAA,CAAAC,QAAA;QACA,KAAAP,cAAA,GAAAO,QAAA,CAAAZ,IAAA;QACA,KAAAM,OAAA;MACA,GACAO,KAAA,CAAAC,KAAA;QACA,KAAAR,OAAA;QACA,KAAAS,QAAA,CAAAD,KAAA,gBAAAA,KAAA,CAAAE,OAAA;MACA;IACA;IACAM,cAAApB,QAAA;MACA,MAAAqB,MAAA,QAAAnB,UAAA,CAAAoB,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA,KAAAxB,QAAA;MACA,OAAAqB,MAAA,GAAAA,MAAA,CAAAxB,IAAA;IACA;IACA4B,eAAAC,WAAA;MACA,KAAAA,WAAA;MACA;QACA;QACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,WAAA;QACA,IAAAG,KAAA,CAAAF,IAAA,CAAAG,OAAA;UACA;UACA;UACA;UACA;UACA,OAAAJ,WAAA;QACA;QACA;QACA,MAAAK,IAAA,GAAAJ,IAAA,CAAAK,WAAA;QACA,MAAAC,KAAA,IAAAN,IAAA,CAAAO,QAAA,QAAAC,QAAA,GAAAC,QAAA;QACA,MAAAC,GAAA,GAAAV,IAAA,CAAAW,OAAA,GAAAH,QAAA,GAAAC,QAAA;QACA,MAAAG,KAAA,GAAAZ,IAAA,CAAAa,QAAA,GAAAL,QAAA,GAAAC,QAAA;QACA,MAAAK,OAAA,GAAAd,IAAA,CAAAe,UAAA,GAAAP,QAAA,GAAAC,QAAA;QACA,MAAAO,OAAA,GAAAhB,IAAA,CAAAiB,UAAA,GAAAT,QAAA,GAAAC,QAAA;QACA,UAAAL,IAAA,IAAAE,KAAA,IAAAI,GAAA,IAAAE,KAAA,IAAAE,OAAA,IAAAE,OAAA;MACA,SAAAE,CAAA;QACAC,OAAA,CAAAC,IAAA,2BAAArB,WAAA,EAAAmB,CAAA;QACA,OAAAnB,WAAA;MACA;IACA;EACA;EACAsB,QAAA;IACA,KAAA1C,YAAA;IACA,KAAAS,eAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}