{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nimport { Notification } from 'element-ui';\nexport default {\n  name: 'UserDashboard',\n  data() {\n    return {\n      deviceStats: [],\n      threshold: 100,\n      // 每台设备报警阈值 100kWh\n      alarmedDevices: new Set(),\n      // 已报警设备，避免重复通知\n      timer: null\n    };\n  },\n  computed: {\n    ...mapState('auth', ['currentUser']),\n    isAdmin() {\n      return this.currentUser && this.currentUser.enabled === true;\n    }\n  },\n  methods: {\n    fetchDeviceStats() {\n      // 获取当天0点到现在的能耗数据\n      const now = new Date();\n      const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n      axios.get('/api/energy-stats', {\n        params: {\n          startTime: start.toISOString(),\n          endTime: now.toISOString(),\n          timeGranularityForTrend: 'hourly'\n        }\n      }).then(res => {\n        if (res.data && res.data.deviceBreakdown) {\n          this.deviceStats = res.data.deviceBreakdown;\n          this.checkAlarms();\n        }\n      }).catch(() => {\n        this.$message.error('获取设备能耗数据失败');\n      });\n    },\n    checkAlarms() {\n      this.deviceStats.forEach(device => {\n        if (device.totalEnergyConsumed > this.threshold && !this.alarmedDevices.has(device.deviceId)) {\n          this.alarmedDevices.add(device.deviceId);\n          Notification.error({\n            title: '能耗报警',\n            message: `设备【${device.deviceName}】今日能耗已达 ${device.totalEnergyConsumed} kWh，超出阈值！`,\n            duration: 6000\n          });\n        }\n        // 如果设备恢复正常，可移除报警（可选）\n        if (device.totalEnergyConsumed <= this.threshold && this.alarmedDevices.has(device.deviceId)) {\n          this.alarmedDevices.delete(device.deviceId);\n        }\n      });\n    },\n    tableRowClassName({\n      row\n    }) {\n      return row.totalEnergyConsumed > this.threshold ? 'alarm-row' : '';\n    }\n  },\n  mounted() {\n    if (this.isAdmin) {\n      this.fetchDeviceStats();\n      this.timer = setInterval(this.fetchDeviceStats, 30000); // 每30秒刷新一次\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n};","map":{"version":3,"names":["mapState","axios","Notification","name","data","deviceStats","threshold","alarmedDevices","Set","timer","computed","isAdmin","currentUser","enabled","methods","fetchDeviceStats","now","Date","start","getFullYear","getMonth","getDate","get","params","startTime","toISOString","endTime","timeGranularityForTrend","then","res","deviceBreakdown","checkAlarms","catch","$message","error","forEach","device","totalEnergyConsumed","has","deviceId","add","title","message","deviceName","duration","delete","tableRowClassName","row","mounted","setInterval","beforeDestroy","clearInterval"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card>\r\n      <div slot=\"header\">\r\n        <span>欢迎回来, {{ currentUser ? currentUser.username : '未知用户' }}!</span>\r\n      </div>\r\n      <p>这里是医院能源管理系统仪表盘。</p>\r\n      <p>当前用户：{{ currentUser ? currentUser.username : '未知用户' }} ({{ currentUser && currentUser.enabled ? '管理员' : '普通用户' }})</p>\r\n      <div v-if=\"isAdmin\">\r\n        <el-table :data=\"deviceStats\" style=\"width: 100%; margin-top: 20px;\" :row-class-name=\"tableRowClassName\">\r\n          <el-table-column prop=\"deviceName\" label=\"设备名称\" width=\"180\" />\r\n          <el-table-column prop=\"totalEnergyConsumed\" label=\"总能耗 (kWh)\" width=\"180\" />\r\n          <el-table-column prop=\"unit\" label=\"单位\" width=\"100\" />\r\n          <el-table-column prop=\"averageEnergyConsumedPerRecord\" label=\"平均能耗 (kWh)\" width=\"180\" />\r\n          <el-table-column prop=\"numberOfRecords\" label=\"数据条数\" width=\"120\" />\r\n          <el-table-column label=\"状态\" width=\"120\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tag v-if=\"scope.row.totalEnergyConsumed > threshold\" type=\"danger\">能耗超标</el-tag>\r\n              <el-tag v-else type=\"success\">正常</el-tag>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex';\r\nimport axios from 'axios';\r\nimport { Notification } from 'element-ui';\r\n\r\nexport default {\r\n  name: 'UserDashboard',\r\n  data() {\r\n    return {\r\n      deviceStats: [],\r\n      threshold: 100, // 每台设备报警阈值 100kWh\r\n      alarmedDevices: new Set(), // 已报警设备，避免重复通知\r\n      timer: null\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState('auth', ['currentUser']),\r\n    isAdmin() {\r\n      return this.currentUser && this.currentUser.enabled === true;\r\n    }\r\n  },\r\n  methods: {\r\n    fetchDeviceStats() {\r\n      // 获取当天0点到现在的能耗数据\r\n      const now = new Date();\r\n      const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\r\n      axios.get('/api/energy-stats', {\r\n        params: {\r\n          startTime: start.toISOString(),\r\n          endTime: now.toISOString(),\r\n          timeGranularityForTrend: 'hourly'\r\n        }\r\n      }).then(res => {\r\n        if (res.data && res.data.deviceBreakdown) {\r\n          this.deviceStats = res.data.deviceBreakdown;\r\n          this.checkAlarms();\r\n        }\r\n      }).catch(() => {\r\n        this.$message.error('获取设备能耗数据失败');\r\n      });\r\n    },\r\n    checkAlarms() {\r\n      this.deviceStats.forEach(device => {\r\n        if (device.totalEnergyConsumed > this.threshold && !this.alarmedDevices.has(device.deviceId)) {\r\n          this.alarmedDevices.add(device.deviceId);\r\n          Notification.error({\r\n            title: '能耗报警',\r\n            message: `设备【${device.deviceName}】今日能耗已达 ${device.totalEnergyConsumed} kWh，超出阈值！`,\r\n            duration: 6000\r\n          });\r\n        }\r\n        // 如果设备恢复正常，可移除报警（可选）\r\n        if (device.totalEnergyConsumed <= this.threshold && this.alarmedDevices.has(device.deviceId)) {\r\n          this.alarmedDevices.delete(device.deviceId);\r\n        }\r\n      });\r\n    },\r\n    tableRowClassName({ row }) {\r\n      return row.totalEnergyConsumed > this.threshold ? 'alarm-row' : '';\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.isAdmin) {\r\n      this.fetchDeviceStats();\r\n      this.timer = setInterval(this.fetchDeviceStats, 30000); // 每30秒刷新一次\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.el-card {\r\n  margin: 20px;\r\n}\r\n\r\np {\r\n  margin: 10px 0;\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n}\r\n\r\n.alarm-row {\r\n  background: #ffeaea !important;\r\n}\r\n</style> "],"mappings":";;;;;;;;;AA4BA,SAAAA,QAAA;AACA,OAAAC,KAAA;AACA,SAAAC,YAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,SAAA;MAAA;MACAC,cAAA,MAAAC,GAAA;MAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAV,QAAA;IACAW,QAAA;MACA,YAAAC,WAAA,SAAAA,WAAA,CAAAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACA;MACA,MAAAC,GAAA,OAAAC,IAAA;MACA,MAAAC,KAAA,OAAAD,IAAA,CAAAD,GAAA,CAAAG,WAAA,IAAAH,GAAA,CAAAI,QAAA,IAAAJ,GAAA,CAAAK,OAAA;MACApB,KAAA,CAAAqB,GAAA;QACAC,MAAA;UACAC,SAAA,EAAAN,KAAA,CAAAO,WAAA;UACAC,OAAA,EAAAV,GAAA,CAAAS,WAAA;UACAE,uBAAA;QACA;MACA,GAAAC,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAzB,IAAA,IAAAyB,GAAA,CAAAzB,IAAA,CAAA0B,eAAA;UACA,KAAAzB,WAAA,GAAAwB,GAAA,CAAAzB,IAAA,CAAA0B,eAAA;UACA,KAAAC,WAAA;QACA;MACA,GAAAC,KAAA;QACA,KAAAC,QAAA,CAAAC,KAAA;MACA;IACA;IACAH,YAAA;MACA,KAAA1B,WAAA,CAAA8B,OAAA,CAAAC,MAAA;QACA,IAAAA,MAAA,CAAAC,mBAAA,QAAA/B,SAAA,UAAAC,cAAA,CAAA+B,GAAA,CAAAF,MAAA,CAAAG,QAAA;UACA,KAAAhC,cAAA,CAAAiC,GAAA,CAAAJ,MAAA,CAAAG,QAAA;UACArC,YAAA,CAAAgC,KAAA;YACAO,KAAA;YACAC,OAAA,QAAAN,MAAA,CAAAO,UAAA,WAAAP,MAAA,CAAAC,mBAAA;YACAO,QAAA;UACA;QACA;QACA;QACA,IAAAR,MAAA,CAAAC,mBAAA,SAAA/B,SAAA,SAAAC,cAAA,CAAA+B,GAAA,CAAAF,MAAA,CAAAG,QAAA;UACA,KAAAhC,cAAA,CAAAsC,MAAA,CAAAT,MAAA,CAAAG,QAAA;QACA;MACA;IACA;IACAO,kBAAA;MAAAC;IAAA;MACA,OAAAA,GAAA,CAAAV,mBAAA,QAAA/B,SAAA;IACA;EACA;EACA0C,QAAA;IACA,SAAArC,OAAA;MACA,KAAAI,gBAAA;MACA,KAAAN,KAAA,GAAAwC,WAAA,MAAAlC,gBAAA;IACA;EACA;EACAmC,cAAA;IACA,SAAAzC,KAAA;MACA0C,aAAA,MAAA1C,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}