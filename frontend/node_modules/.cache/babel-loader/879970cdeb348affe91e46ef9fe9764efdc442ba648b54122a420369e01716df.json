{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'UserRegister',\n  data() {\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.registerForm.confirmPassword !== '') {\n          this.$refs.registerFormRef.validateField('confirmPassword');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.registerForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      registerForm: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      registerRules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 20,\n          message: '长度在 3 到 20 个字符',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请输入邮箱地址',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: ['blur', 'change']\n        }],\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度不能少于6位',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }]\n      },\n      loading: false,\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  methods: {\n    ...mapActions('auth', ['register']),\n    handleRegister() {\n      this.$refs.registerFormRef.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          this.errorMessage = '';\n          this.successMessage = '';\n          const userData = {\n            username: this.registerForm.username,\n            email: this.registerForm.email,\n            password: this.registerForm.password,\n            roles: ['user'] // 默认注册为普通用户\n          };\n          this.register(userData).then(() => {\n            this.loading = false;\n            this.successMessage = '注册成功！请登录。';\n            this.$message.success('注册成功！即将跳转到登录页...');\n            setTimeout(() => {\n              this.$router.push('/login');\n            }, 2000);\n          }).catch(error => {\n            this.loading = false;\n            this.errorMessage = error.response && error.response.data && error.response.data.message || '注册失败，请稍后重试。';\n            this.$message.error(this.errorMessage);\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    goToLogin() {\n      this.$router.push('/login');\n    }\n  }\n};","map":{"version":3,"names":["mapActions","name","data","validatePass","rule","value","callback","Error","registerForm","confirmPassword","$refs","registerFormRef","validateField","validatePass2","password","username","email","registerRules","required","message","trigger","min","max","type","validator","loading","errorMessage","successMessage","methods","handleRegister","validate","valid","userData","roles","register","then","$message","success","setTimeout","$router","push","catch","error","response","goToLogin"],"sources":["src/views/Register.vue"],"sourcesContent":["<template>\r\n  <el-container class=\"register-container\">\r\n    <el-card class=\"register-card\">\r\n      <h2 class=\"register-title\">医院能源管理系统 - 注册</h2>\r\n      <el-form :model=\"registerForm\" :rules=\"registerRules\" ref=\"registerFormRef\" @submit.native.prevent=\"handleRegister\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input v-model=\"registerForm.username\" placeholder=\"用户名\" prefix-icon=\"el-icon-user\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"email\">\r\n          <el-input v-model=\"registerForm.email\" placeholder=\"邮箱\" prefix-icon=\"el-icon-message\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input type=\"password\" v-model=\"registerForm.password\" placeholder=\"密码\" prefix-icon=\"el-icon-lock\" show-password></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"confirmPassword\">\r\n          <el-input type=\"password\" v-model=\"registerForm.confirmPassword\" placeholder=\"确认密码\" prefix-icon=\"el-icon-lock\" show-password></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" native-type=\"submit\" :loading=\"loading\" style=\"width:100%;\">注册</el-button>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"text\" @click=\"goToLogin\">已有账户？去登录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      <el-alert v-if=\"errorMessage\" :title=\"errorMessage\" type=\"error\" show-icon :closable=\"false\"></el-alert>\r\n      <el-alert v-if=\"successMessage\" :title=\"successMessage\" type=\"success\" show-icon :closable=\"false\"></el-alert>\r\n    </el-card>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  name: 'UserRegister',\r\n  data() {\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入密码'));\r\n      } else {\r\n        if (this.registerForm.confirmPassword !== '') {\r\n          this.$refs.registerFormRef.validateField('confirmPassword');\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请再次输入密码'));\r\n      } else if (value !== this.registerForm.password) {\r\n        callback(new Error('两次输入密码不一致!'));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      registerForm: {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n      },\r\n      registerRules: {\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' },\r\n          { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }\r\n        ],\r\n        email: [\r\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }\r\n        ],\r\n        password: [\r\n          { validator: validatePass, trigger: 'blur' },\r\n          { min: 6, message: '密码长度不能少于6位', trigger: 'blur' }\r\n        ],\r\n        confirmPassword: [\r\n          { validator: validatePass2, trigger: 'blur' }\r\n        ]\r\n      },\r\n      loading: false,\r\n      errorMessage: '',\r\n      successMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapActions('auth', ['register']),\r\n    handleRegister() {\r\n      this.$refs.registerFormRef.validate(valid => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          this.errorMessage = '';\r\n          this.successMessage = '';\r\n          const userData = {\r\n            username: this.registerForm.username,\r\n            email: this.registerForm.email,\r\n            password: this.registerForm.password,\r\n            roles: ['user'] // 默认注册为普通用户\r\n          };\r\n          this.register(userData)\r\n            .then(() => {\r\n              this.loading = false;\r\n              this.successMessage = '注册成功！请登录。';\r\n              this.$message.success('注册成功！即将跳转到登录页...');\r\n              setTimeout(() => {\r\n                this.$router.push('/login');\r\n              }, 2000);\r\n            })\r\n            .catch(error => {\r\n              this.loading = false;\r\n              this.errorMessage = (error.response && error.response.data && error.response.data.message) || '注册失败，请稍后重试。';\r\n              this.$message.error(this.errorMessage);\r\n            });\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    goToLogin() {\r\n      this.$router.push('/login');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.register-card {\r\n  width: 450px;\r\n}\r\n\r\n.register-title {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style> "],"mappings":";AA+BA,SAAAA,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACA,SAAAC,YAAA,CAAAC,eAAA;UACA,KAAAC,KAAA,CAAAC,eAAA,CAAAC,aAAA;QACA;QACAN,QAAA;MACA;IACA;IACA,IAAAO,aAAA,GAAAA,CAAAT,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAG,YAAA,CAAAM,QAAA;QACAR,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAE,YAAA;QACAO,QAAA;QACAC,KAAA;QACAF,QAAA;QACAL,eAAA;MACA;MACAQ,aAAA;QACAF,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,KAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,IAAA;UAAAJ,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,QAAA,GACA;UAAAU,SAAA,EAAArB,YAAA;UAAAiB,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAX,eAAA,GACA;UAAAe,SAAA,EAAAX,aAAA;UAAAO,OAAA;QAAA;MAEA;MACAK,OAAA;MACAC,YAAA;MACAC,cAAA;IACA;EACA;EACAC,OAAA;IACA,GAAA5B,UAAA;IACA6B,eAAA;MACA,KAAAnB,KAAA,CAAAC,eAAA,CAAAmB,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAN,OAAA;UACA,KAAAC,YAAA;UACA,KAAAC,cAAA;UACA,MAAAK,QAAA;YACAjB,QAAA,OAAAP,YAAA,CAAAO,QAAA;YACAC,KAAA,OAAAR,YAAA,CAAAQ,KAAA;YACAF,QAAA,OAAAN,YAAA,CAAAM,QAAA;YACAmB,KAAA;UACA;UACA,KAAAC,QAAA,CAAAF,QAAA,EACAG,IAAA;YACA,KAAAV,OAAA;YACA,KAAAE,cAAA;YACA,KAAAS,QAAA,CAAAC,OAAA;YACAC,UAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;UACA,GACAC,KAAA,CAAAC,KAAA;YACA,KAAAjB,OAAA;YACA,KAAAC,YAAA,GAAAgB,KAAA,CAAAC,QAAA,IAAAD,KAAA,CAAAC,QAAA,CAAAzC,IAAA,IAAAwC,KAAA,CAAAC,QAAA,CAAAzC,IAAA,CAAAiB,OAAA;YACA,KAAAiB,QAAA,CAAAM,KAAA,MAAAhB,YAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAkB,UAAA;MACA,KAAAL,OAAA,CAAAC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}