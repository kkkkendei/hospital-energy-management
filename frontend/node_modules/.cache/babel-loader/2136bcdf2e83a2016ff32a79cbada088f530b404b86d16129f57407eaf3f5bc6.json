{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\nconst authModule = {\n  namespaced: true,\n  state: {\n    user: null,\n    // 可以存储用户信息对象\n    token: localStorage.getItem('user-token') || ''\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      state.token = token;\n      localStorage.setItem('user-token', token); // 持久化token\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // 设置axios请求头\n    },\n    CLEAR_TOKEN(state) {\n      state.token = '';\n      localStorage.removeItem('user-token');\n      delete axios.defaults.headers.common['Authorization'];\n    },\n    SET_USER(state, user) {\n      state.user = user;\n      // 你也可以将用户信息存储在localStorage，但要注意敏感信息\n    },\n    CLEAR_USER(state) {\n      state.user = null;\n    }\n  },\n  actions: {\n    // 登录action\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('/auth/signin', credentials); // 使用真实的axios调用，路径相对于baseURL\n        // 假设后端 JwtResponse 结构为: { token: \"...\", id: ..., username: \"...\", email: \"...\", roles: [...] }\n        const token = response.data.token;\n        const user = {\n          id: response.data.id,\n          username: response.data.username,\n          email: response.data.email,\n          roles: response.data.roles\n        };\n        if (!token || !user.username) {\n          throw new Error('Login failed: Invalid token or user data received from server.');\n        }\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n        return Promise.resolve(user);\n      } catch (error) {\n        commit('CLEAR_TOKEN');\n        commit('CLEAR_USER');\n        // 将后端错误信息或通用错误信息传递出去，方便UI显示\n        const errorMessage = error.response && error.response.data && error.response.data.message ? error.response.data.message : error.message || 'Login failed due to an unexpected error.';\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    // 注册action\n    async register(_context, userData) {\n      try {\n        const response = await axios.post('/auth/signup', userData); // 使用真实的axios调用\n        // 假设后端成功注册后返回 MessageResponse: { message: \"...\" }\n        return Promise.resolve(response.data);\n      } catch (error) {\n        // 将后端错误信息或通用错误信息传递出去\n        const errorMessage = error.response && error.response.data && error.response.data.message ? error.response.data.message : error.message || 'Registration failed due to an unexpected error.';\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    // 登出action\n    logout({\n      commit\n    }) {\n      commit('CLEAR_TOKEN');\n      commit('CLEAR_USER');\n      // 可以在这里添加其他清理操作，例如清除axios的Authorization头部\n      // （已经在CLEAR_TOKEN mutation中处理了）\n      return Promise.resolve();\n    },\n    // 可选: 应用加载时尝试从token获取用户信息\n    async fetchUser({\n      state,\n      dispatch\n    }) {\n      if (state.token && !state.user) {\n        try {\n          // 真实的 fetchUser 应该调用后端接口验证 token 并获取用户信息\n          // 例如: const { data } = await axios.get('/auth/me');\n          // commit('SET_USER', data);\n          // console.log('User details fetched from server.');\n\n          // 当前简化处理：如果token存在但用户信息不在state（例如页面刷新）\n          // 暂时不自动重新获取用户信息，依赖重新登录或后续的路由守卫\n          // 重要的是确保axios的Authorization头在页面加载时如果token存在就设置好\n          if (state.token && !axios.defaults.headers.common['Authorization']) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`;\n          }\n          console.warn(\"fetchUser: User details not in state. For robust session recovery, implement a backend '/auth/me' endpoint and call it here.\");\n          // 如果是旧的 fake token，可以考虑清除\n          if (state.token.startsWith('fake-jwt-token-for-')) {\n            console.warn(\"fetchUser: Detected old fake token. Logging out.\");\n            await dispatch('logout'); // 使用 await 确保 logout 完成\n          }\n        } catch (error) {\n          console.error('Error in fetchUser or token invalid:', error);\n          await dispatch('logout'); // 清理token和user\n        }\n      }\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    currentUser: state => state.user,\n    userRole: state => state.user ? state.user.role : null\n  }\n};\nexport default new Vuex.Store({\n  modules: {\n    auth: authModule\n  }\n  // 你可以在这里添加更多的模块\n});","map":{"version":3,"names":["Vue","Vuex","axios","use","authModule","namespaced","state","user","token","localStorage","getItem","mutations","SET_TOKEN","setItem","defaults","headers","common","CLEAR_TOKEN","removeItem","SET_USER","CLEAR_USER","actions","login","commit","credentials","response","post","data","id","username","email","roles","Error","Promise","resolve","error","errorMessage","message","reject","register","_context","userData","logout","fetchUser","dispatch","console","warn","startsWith","getters","isAuthenticated","currentUser","userRole","role","Store","modules","auth"],"sources":["C:/Users/吴泽宇/Desktop/医院智慧能源管理系统/hospital-energy-management/frontend/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios';\n\nVue.use(Vuex)\n\nconst authModule = {\n  namespaced: true,\n  state: {\n    user: null, // 可以存储用户信息对象\n    token: localStorage.getItem('user-token') || ''\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      state.token = token;\n      localStorage.setItem('user-token', token); // 持久化token\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // 设置axios请求头\n    },\n    CLEAR_TOKEN(state) {\n      state.token = '';\n      localStorage.removeItem('user-token');\n      delete axios.defaults.headers.common['Authorization'];\n    },\n    SET_USER(state, user) {\n      state.user = user;\n      // 你也可以将用户信息存储在localStorage，但要注意敏感信息\n    },\n    CLEAR_USER(state) {\n      state.user = null;\n    }\n  },\n  actions: {\n    // 登录action\n    async login({ commit }, credentials) {\n      try {\n        const response = await axios.post('/auth/signin', credentials); // 使用真实的axios调用，路径相对于baseURL\n        // 假设后端 JwtResponse 结构为: { token: \"...\", id: ..., username: \"...\", email: \"...\", roles: [...] }\n        const token = response.data.token;\n        const user = {\n            id: response.data.id,\n            username: response.data.username,\n            email: response.data.email,\n            roles: response.data.roles\n        };\n\n        if (!token || !user.username) {\n          throw new Error('Login failed: Invalid token or user data received from server.');\n        }\n\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n        return Promise.resolve(user);\n      } catch (error) {\n        commit('CLEAR_TOKEN');\n        commit('CLEAR_USER');\n        // 将后端错误信息或通用错误信息传递出去，方便UI显示\n        const errorMessage = error.response && error.response.data && error.response.data.message \n                           ? error.response.data.message \n                           : (error.message || 'Login failed due to an unexpected error.');\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    // 注册action\n    async register(_context, userData) {\n      try {\n        const response = await axios.post('/auth/signup', userData); // 使用真实的axios调用\n        // 假设后端成功注册后返回 MessageResponse: { message: \"...\" }\n        return Promise.resolve(response.data); \n      } catch (error) {\n        // 将后端错误信息或通用错误信息传递出去\n        const errorMessage = error.response && error.response.data && error.response.data.message\n                           ? error.response.data.message\n                           : (error.message || 'Registration failed due to an unexpected error.');\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    // 登出action\n    logout({ commit }) {\n      commit('CLEAR_TOKEN');\n      commit('CLEAR_USER');\n      // 可以在这里添加其他清理操作，例如清除axios的Authorization头部\n      // （已经在CLEAR_TOKEN mutation中处理了）\n      return Promise.resolve();\n    },\n    // 可选: 应用加载时尝试从token获取用户信息\n    async fetchUser({ state, dispatch }) {\n      if (state.token && !state.user) { \n        try {\n          // 真实的 fetchUser 应该调用后端接口验证 token 并获取用户信息\n          // 例如: const { data } = await axios.get('/auth/me');\n          // commit('SET_USER', data);\n          // console.log('User details fetched from server.');\n\n          // 当前简化处理：如果token存在但用户信息不在state（例如页面刷新）\n          // 暂时不自动重新获取用户信息，依赖重新登录或后续的路由守卫\n          // 重要的是确保axios的Authorization头在页面加载时如果token存在就设置好\n          if (state.token && !axios.defaults.headers.common['Authorization']) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`;\n          }\n          console.warn(\"fetchUser: User details not in state. For robust session recovery, implement a backend '/auth/me' endpoint and call it here.\");\n          // 如果是旧的 fake token，可以考虑清除\n          if (state.token.startsWith('fake-jwt-token-for-')) {\n            console.warn(\"fetchUser: Detected old fake token. Logging out.\");\n            await dispatch('logout'); // 使用 await 确保 logout 完成\n          }\n          \n        } catch (error) {\n          console.error('Error in fetchUser or token invalid:', error);\n          await dispatch('logout'); // 清理token和user\n        }\n      }\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    currentUser: state => state.user,\n    userRole: state => state.user ? state.user.role : null\n  }\n}\n\nexport default new Vuex.Store({\n  modules: {\n    auth: authModule\n  }\n  // 你可以在这里添加更多的模块\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}