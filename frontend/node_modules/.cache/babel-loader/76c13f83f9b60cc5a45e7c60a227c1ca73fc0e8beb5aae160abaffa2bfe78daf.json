{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts'; // 1. Import ECharts\nimport * as XLSX from 'xlsx'; // Import XLSX\n\nexport default {\n  name: 'EnergyAnalysis',\n  data() {\n    return {\n      filters: {\n        deviceIds: [],\n        energyType: '',\n        timeRange: [],\n        // [startTime, endTime] as ISO strings from date picker\n        timeGranularityForTrend: 'daily' // Added for API, can be configurable\n      },\n      deviceList: [],\n      loading: false,\n      trendChartInstance: null,\n      pieChartInstance: null,\n      // Keep for now, implement later if needed\n      analysisResults: {\n        // To store all parts of the response\n        queryParameters: null,\n        overallStats: null,\n        deviceBreakdown: [],\n        energyTrend: null\n      }\n    };\n  },\n  methods: {\n    fetchDevices() {\n      this.$http.get('/api/devices').then(response => {\n        this.deviceList = response.data;\n      }).catch(error => {\n        this.$message.error('获取设备列表失败: ' + error.message);\n      });\n    },\n    validateFilters() {\n      if (!this.filters.timeRange || this.filters.timeRange.length !== 2) {\n        this.$message.error('请选择分析周期！');\n        return false;\n      }\n      // Convert to Date objects to check validity\n      const startTime = new Date(this.filters.timeRange[0]);\n      const endTime = new Date(this.filters.timeRange[1]);\n      if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\n        this.$message.error('分析周期的日期时间格式无效！');\n        return false;\n      }\n      if (startTime >= endTime) {\n        this.$message.error('开始时间必须早于结束时间！');\n        return false;\n      }\n      return true;\n    },\n    performAnalysis() {\n      if (!this.validateFilters()) {\n        return;\n      }\n      // Note: Element UI form validation (`this.$refs.filterFormRef.validate`)\n      // is useful if you have specific rules on <el-form-item prop=\"xxx\">.\n      // Here, validateFilters() handles the primary logic.\n      // If filterFormRef has rules, they will also be checked.\n      this.$refs.filterFormRef.validate(valid => {\n        if (valid) {\n          // `valid` will be true if Element UI rules (if any) pass\n          this.loading = true;\n          const params = {\n            // deviceIds should be an array of Longs, Axios handles serialization\n            deviceIds: this.filters.deviceIds.length > 0 ? this.filters.deviceIds.join(',') : null,\n            // Send as comma-separated string\n            energyType: this.filters.energyType || null,\n            // Send null if empty\n            startTime: this.filters.timeRange[0],\n            // ISO String\n            endTime: this.filters.timeRange[1],\n            // ISO String\n            timeGranularityForTrend: this.filters.timeGranularityForTrend\n          };\n          console.log(\"Submitting analysis params:\", params);\n          this.$http.get('/api/energy-stats', {\n            params\n          }).then(response => {\n            if (response.data) {\n              this.analysisResults = response.data;\n              this.$message.success('能耗分析数据已获取!');\n              this.$nextTick(() => {\n                // Ensure DOM is updated before rendering charts\n                this.renderCharts();\n              });\n            } else {\n              this.$message.error('获取能耗分析数据失败: 响应为空');\n              this.clearResultsAndCharts();\n            }\n            this.loading = false;\n          }).catch(error => {\n            let errMsg = '获取能耗分析数据失败';\n            if (error.response && error.response.data) {\n              // Try to get message from Spring Boot's default error response\n              if (error.response.data.message) errMsg += ': ${error.response.data.message}';else if (error.response.data.error) errMsg += ': ${error.response.data.error}';\n            } else if (error.message) {\n              errMsg += ': ${error.message}';\n            }\n            this.$message.error(errMsg);\n            this.loading = false;\n            this.clearResultsAndCharts();\n          });\n        } else {\n          // This part is for Element UI's own validation messages if form rules are set\n          // this.$message.error('请检查筛选条件中的错误!'); // Typically Element UI shows errors directly on fields\n          return false;\n        }\n      });\n    },\n    clearResultsAndCharts() {\n      this.analysisResults = {\n        queryParameters: null,\n        overallStats: null,\n        deviceBreakdown: [],\n        energyTrend: null\n      };\n      if (this.trendChartInstance) {\n        this.trendChartInstance.clear();\n        // Optional: Dispose and nullify if you want to completely re-init next time\n        // this.trendChartInstance.dispose();\n        // this.trendChartInstance = null;\n      }\n      // if (this.pieChartInstance) { this.pieChartInstance.clear(); }\n    },\n    resetFilters() {\n      // Check if filterFormRef is available before calling resetFields\n      if (this.$refs.filterFormRef) {\n        this.$refs.filterFormRef.resetFields();\n      }\n      this.filters.deviceIds = [];\n      this.filters.energyType = '';\n      this.filters.timeRange = [];\n      this.filters.timeGranularityForTrend = 'daily';\n      this.clearResultsAndCharts();\n    },\n    exportDataAsCSV() {\n      if (!this.analysisResults || !this.analysisResults.overallStats) {\n        this.$message.info('没有可导出的分析数据。');\n        return;\n      }\n      const {\n        queryParameters,\n        overallStats,\n        deviceBreakdown\n      } = this.analysisResults;\n      let csvContent = \"\";\n\n      // Helper to format arrays for CSV (handles comma within strings if any by quoting)\n      const escapeCSV = field => {\n        if (field === null || typeof field === 'undefined') return '\"\"';\n        let str = String(field);\n        // If the field contains a comma, a quote, or a newline, enclose it in double quotes\n        // and escape any existing double quotes by doubling them.\n        if (str.search(/(\"|,|\\n)/g) >= 0) {\n          str = '\"' + str.replace(/\"/g, '\"\"') + '\"';\n        }\n        return str;\n      };\n      const formatDateForCSV = isoDateString => {\n        if (!isoDateString) return 'N/A';\n        try {\n          return new Date(isoDateString).toLocaleString();\n        } catch (e) {\n          return isoDateString; // fallback to original if parsing fails\n        }\n      };\n\n      // Section 1: Query Parameters\n      csvContent += \"查询参数\\n\";\n      csvContent += \"参数名称,参数值\\n\";\n      csvContent += `设备IDs,${escapeCSV(queryParameters.deviceIds && queryParameters.deviceIds.length > 0 ? queryParameters.deviceIds.join(';') : '全部')}\\n`; // Use semicolon for list\n      csvContent += `能源类型,${escapeCSV(queryParameters.energyType || '全部')}\\n`;\n      csvContent += `开始时间,${escapeCSV(formatDateForCSV(queryParameters.startTime))}\\n`;\n      csvContent += `结束时间,${escapeCSV(formatDateForCSV(queryParameters.endTime))}\\n`;\n      csvContent += `趋势图粒度,${escapeCSV(queryParameters.timeGranularityForTrend || 'N/A')}\\n\\n`;\n\n      // Section 2: Overall Statistics\n      csvContent += \"总体能耗摘要\\n\";\n      csvContent += \"统计项,值,单位\\n\";\n      csvContent += `${escapeCSV('总能耗')},${escapeCSV(overallStats.totalEnergyConsumed != null ? overallStats.totalEnergyConsumed.toFixed(2) : 'N/A')},${escapeCSV(overallStats.unit || '')}\\n`;\n      csvContent += `${escapeCSV('平均能耗 (每条记录)')},${escapeCSV(overallStats.averageEnergyConsumedPerRecord != null ? overallStats.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A')},${escapeCSV(overallStats.unit || '')}\\n`;\n      csvContent += `${escapeCSV('数据记录数')},${escapeCSV(overallStats.numberOfRecords != null ? overallStats.numberOfRecords : 'N/A')},\\n\\n`;\n\n      // Section 3: Device Breakdown\n      if (deviceBreakdown && deviceBreakdown.length > 0) {\n        csvContent += \"各设备能耗细分\\n\";\n        // Header row for device breakdown\n        csvContent += \"设备ID,设备名称,总能耗,平均能耗 (每条记录),数据记录数,单位\\n\";\n        // Data rows\n        deviceBreakdown.forEach(device => {\n          csvContent += [escapeCSV(device.deviceId), escapeCSV(device.deviceName), escapeCSV(device.totalEnergyConsumed != null ? device.totalEnergyConsumed.toFixed(2) : 'N/A'), escapeCSV(device.averageEnergyConsumedPerRecord != null ? device.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A'), escapeCSV(device.numberOfRecords), escapeCSV(device.unit || '')].join(',') + \"\\n\";\n        });\n      } else {\n        csvContent += \"各设备能耗细分\\n\";\n        csvContent += \"没有查询到符合条件的设备细分数据\\n\";\n      }\n      csvContent += \"\\n\";\n\n      // Create Blob and trigger download\n      // UTF-8 BOM to ensure Excel opens cyrillic/special characters correctly\n      const BOM = \"\\uFEFF\";\n      const blob = new Blob([BOM + csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement(\"a\");\n      if (link.download !== undefined) {\n        // Feature detection\n        const url = URL.createObjectURL(blob);\n        const reportDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", `能耗分析报表_${reportDate}.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      } else {\n        this.$message.error('您的浏览器不支持直接下载文件，请尝试手动复制内容。');\n      }\n    },\n    exportDataAsExcel() {\n      if (!this.analysisResults || !this.analysisResults.overallStats) {\n        this.$message.info('没有可导出的分析数据。');\n        return;\n      }\n      const {\n        queryParameters,\n        overallStats,\n        deviceBreakdown\n      } = this.analysisResults;\n      const reportDate = new Date().toISOString().split('T')[0];\n      const fileName = `能耗分析报表_${reportDate}.xlsx`;\n\n      // --- Sheet 1: Summary --- \n      const summaryData = [{\n        Item: '查询参数:',\n        '': ''\n      },\n      // Title row\n      {\n        Item: '设备IDs',\n        Value: queryParameters.deviceIds && queryParameters.deviceIds.length > 0 ? queryParameters.deviceIds.join('; ') : '全部'\n      }, {\n        Item: '能源类型',\n        Value: queryParameters.energyType || '全部'\n      }, {\n        Item: '开始时间',\n        Value: new Date(queryParameters.startTime).toLocaleString()\n      }, {\n        Item: '结束时间',\n        Value: new Date(queryParameters.endTime).toLocaleString()\n      }, {\n        Item: '趋势图粒度',\n        Value: queryParameters.timeGranularityForTrend || 'N/A'\n      }, {\n        Item: '',\n        '': ''\n      },\n      // Spacer row\n      {\n        Item: '总体能耗摘要:',\n        '': ''\n      },\n      // Title row\n      {\n        Item: '总能耗',\n        Value: overallStats.totalEnergyConsumed != null ? overallStats.totalEnergyConsumed.toFixed(2) : 'N/A',\n        Unit: overallStats.unit || ''\n      }, {\n        Item: '平均能耗 (每条记录)',\n        Value: overallStats.averageEnergyConsumedPerRecord != null ? overallStats.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A',\n        Unit: overallStats.unit || ''\n      }, {\n        Item: '数据记录数',\n        Value: overallStats.numberOfRecords != null ? overallStats.numberOfRecords : 'N/A'\n      }];\n      const wsSummary = XLSX.utils.json_to_sheet(summaryData, {\n        skipHeader: true\n      }); // skipHeader to manually control layout or use aoa_to_sheet for more control\n      // Set column widths for summary sheet (optional)\n      wsSummary['!cols'] = [{\n        wch: 25\n      }, {\n        wch: 40\n      }, {\n        wch: 10\n      }];\n\n      // --- Sheet 2: Device Breakdown --- \n      let wsDeviceBreakdown = null;\n      if (deviceBreakdown && deviceBreakdown.length > 0) {\n        // Prepare data for sheet: rename headers for clarity if needed\n        const deviceDataForSheet = deviceBreakdown.map(d => ({\n          '设备ID': d.deviceId,\n          '设备名称': d.deviceName,\n          '总能耗': d.totalEnergyConsumed != null ? d.totalEnergyConsumed.toFixed(2) : 'N/A',\n          '平均能耗(每条记录)': d.averageEnergyConsumedPerRecord != null ? d.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A',\n          '数据记录数': d.numberOfRecords,\n          '单位': d.unit || ''\n        }));\n        wsDeviceBreakdown = XLSX.utils.json_to_sheet(deviceDataForSheet);\n        // Set column widths for device breakdown sheet (optional)\n        wsDeviceBreakdown['!cols'] = [{\n          wch: 10\n        }, {\n          wch: 25\n        }, {\n          wch: 12\n        }, {\n          wch: 20\n        }, {\n          wch: 12\n        }, {\n          wch: 8\n        }];\n      } else {\n        // Create a sheet indicating no data if breakdown is empty\n        wsDeviceBreakdown = XLSX.utils.json_to_sheet([{\n          Message: '没有查询到符合条件的设备细分数据'\n        }]);\n      }\n\n      // --- Create Workbook and Download --- \n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, wsSummary, \"查询与摘要\");\n      XLSX.utils.book_append_sheet(wb, wsDeviceBreakdown, \"设备能耗明细\");\n      XLSX.writeFile(wb, fileName);\n      this.$message.success('Excel报表已开始下载。');\n    },\n    renderCharts() {\n      if (!this.$refs.trendChart) {\n        // Ensure the ref is available\n        console.warn(\"Trend chart ref not found, cannot render.\");\n        return;\n      }\n      if (!this.analysisResults || !this.analysisResults.energyTrend || !this.analysisResults.energyTrend.timeLabels) {\n        if (this.trendChartInstance) this.trendChartInstance.clear();\n        console.log(\"No trend data to render or chart instance not ready.\");\n        return;\n      }\n      const trendData = this.analysisResults.energyTrend;\n      if (!this.trendChartInstance) {\n        try {\n          this.trendChartInstance = echarts.init(this.$refs.trendChart);\n        } catch (e) {\n          console.error(\"Failed to initialize trend chart:\", e);\n          this.$message.error(\"图表初始化失败，请刷新页面或检查控制台。\");\n          return;\n        }\n      }\n      const yAxisUnit = trendData.datasets && trendData.datasets.length > 0 && trendData.datasets[0].unit ? trendData.datasets[0].unit : '';\n      const trendOption = {\n        title: {\n          text: '能耗趋势图',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            // Custom tooltip formatter\n            let tooltipHtml = params[0].name + '<br/>'; // Time label\n            params.forEach(item => {\n              tooltipHtml += `${item.marker} ${item.seriesName}: ${item.value != null ? item.value.toFixed(2) : 'N/A'} ${yAxisUnit}<br/>`;\n            });\n            return tooltipHtml;\n          }\n        },\n        legend: {\n          data: trendData.datasets ? trendData.datasets.map(ds => ds.label) : [],\n          top: 'bottom'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '10%',\n          // Adjusted for legend at bottom\n          containLabel: true\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {\n              title: '保存为图片'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: trendData.timeLabels || []\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: `{value} ${yAxisUnit}`\n          }\n        },\n        dataZoom: [\n        // Add data zoom for better navigation on large datasets\n        {\n          type: 'slider',\n          start: 0,\n          end: 100,\n          xAxisIndex: 0,\n          filterMode: 'empty'\n        }, {\n          type: 'inside',\n          start: 0,\n          end: 100,\n          xAxisIndex: 0,\n          filterMode: 'empty'\n        }],\n        series: trendData.datasets ? trendData.datasets.map(ds => ({\n          name: ds.label,\n          type: 'line',\n          data: ds.data || [],\n          smooth: true,\n          itemStyle: {/*Можно добавить стили для линий/точек*/},\n          lineStyle: {/*Можно добавить стили для линий*/}\n        })) : []\n      };\n      this.trendChartInstance.setOption(trendOption, true); // true to not merge with previous options\n    },\n    handleResize() {\n      this.$nextTick(() => {\n        // Ensure resize happens after any DOM updates\n        if (this.trendChartInstance) {\n          this.trendChartInstance.resize();\n        }\n        // if (this.pieChartInstance) { this.pieChartInstance.resize(); }\n      });\n    }\n  },\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n    // Consider fetching devices only if deviceList is empty or on demand\n    if (this.deviceList.length === 0) {\n      this.fetchDevices();\n    }\n  },\n  created() {\n    // fetchDevices moved to mounted to ensure $http is available if it relies on global setup.\n    // However, typically it's fine in created(). If issues, move back to created() or ensure $http setup.\n  },\n  beforeDestroy() {\n    if (this.trendChartInstance) {\n      this.trendChartInstance.dispose();\n      this.trendChartInstance = null;\n    }\n    // if (this.pieChartInstance) { this.pieChartInstance.dispose(); this.pieChartInstance = null; }\n    window.removeEventListener('resize', this.handleResize);\n  }\n};","map":{"version":3,"names":["echarts","XLSX","name","data","filters","deviceIds","energyType","timeRange","timeGranularityForTrend","deviceList","loading","trendChartInstance","pieChartInstance","analysisResults","queryParameters","overallStats","deviceBreakdown","energyTrend","methods","fetchDevices","$http","get","then","response","catch","error","$message","message","validateFilters","length","startTime","Date","endTime","isNaN","getTime","performAnalysis","$refs","filterFormRef","validate","valid","params","join","console","log","success","$nextTick","renderCharts","clearResultsAndCharts","errMsg","clear","resetFilters","resetFields","exportDataAsCSV","info","csvContent","escapeCSV","field","str","String","search","replace","formatDateForCSV","isoDateString","toLocaleString","e","totalEnergyConsumed","toFixed","unit","averageEnergyConsumedPerRecord","numberOfRecords","forEach","device","deviceId","deviceName","BOM","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","reportDate","toISOString","split","setAttribute","style","visibility","body","appendChild","click","removeChild","revokeObjectURL","exportDataAsExcel","fileName","summaryData","Item","Value","Unit","wsSummary","utils","json_to_sheet","skipHeader","wch","wsDeviceBreakdown","deviceDataForSheet","map","d","Message","wb","book_new","book_append_sheet","writeFile","trendChart","warn","timeLabels","trendData","init","yAxisUnit","datasets","trendOption","title","text","left","tooltip","trigger","formatter","tooltipHtml","item","marker","seriesName","value","legend","ds","label","top","grid","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","boundaryGap","yAxis","axisLabel","dataZoom","start","end","xAxisIndex","filterMode","series","smooth","itemStyle","lineStyle","setOption","handleResize","resize","mounted","window","addEventListener","created","beforeDestroy","dispose","removeEventListener"],"sources":["src/views/EnergyAnalysis.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-analysis-container\">\r\n    <el-card class=\"box-card filter-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能耗分析筛选</span>\r\n      </div>\r\n\r\n      <!-- Filter Section -->\r\n      <el-form :inline=\"true\" :model=\"filters\" class=\"filter-form\" ref=\"filterFormRef\">\r\n        <el-form-item label=\"选择设备\" prop=\"deviceIds\">\r\n          <el-select v-model=\"filters.deviceIds\" multiple placeholder=\"可多选，或不选代表所有设备\" style=\"width: 280px;\" clearable>\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + (device.model ? ' (' + device.model + ')' : '')\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"能源类型\" prop=\"energyType\">\r\n           <el-input v-model=\"filters.energyType\" placeholder=\"例如: 电能, 水 (可选)\" style=\"width: 180px;\" clearable></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"分析周期\" prop=\"timeRange\" required>\r\n          <el-date-picker\r\n            v-model=\"filters.timeRange\"\r\n            type=\"datetimerange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期时间\"\r\n            end-placeholder=\"结束日期时间\"\r\n            format=\"yyyy-MM-dd HH:mm:ss\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\" \r\n            :default-time=\"['00:00:00', '23:59:59']\"\r\n            style=\"width: 370px;\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"趋势粒度\" prop=\"timeGranularityForTrend\">\r\n            <el-select v-model=\"filters.timeGranularityForTrend\" placeholder=\"选择趋势图时间粒度\" style=\"width: 150px;\">\r\n                <el-option label=\"每日\" value=\"daily\"></el-option>\r\n                <el-option label=\"每小时\" value=\"hourly\"></el-option>\r\n            </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"performAnalysis\" :loading=\"loading\">开始分析</el-button>\r\n          <el-button icon=\"el-icon-refresh\" @click=\"resetFilters\">重置筛选</el-button>\r\n          <el-button \r\n            type=\"success\" \r\n            icon=\"el-icon-document\" \r\n            @click=\"exportDataAsCSV\" \r\n            :disabled=\"!analysisResults.overallStats || loading\"\r\n            v-if=\"analysisResults.overallStats\">\r\n            导出CSV报表\r\n          </el-button>\r\n          <el-button \r\n            type=\"primary\" \r\n            icon=\"el-icon-notebook-2\" \r\n            @click=\"exportDataAsExcel\" \r\n            :disabled=\"!analysisResults.overallStats || loading\"\r\n            v-if=\"analysisResults.overallStats\">\r\n            导出Excel报表\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <!-- Results Display Area -->\r\n    <div v-if=\"loading\" class=\"loading-overlay\">\r\n        <el-spinner text=\"正在加载分析结果...\"></el-spinner>\r\n    </div>\r\n\r\n    <div v-if=\"!loading && analysisResults.overallStats\">\r\n        <!-- Overall Stats Summary -->\r\n        <el-card class=\"box-card stats-summary-card\">\r\n            <div slot=\"header\" class=\"clearfix\">\r\n                <span>总体能耗摘要</span>\r\n            </div>\r\n            <el-descriptions :column=\"2\" border>\r\n                <el-descriptions-item label=\"总能耗\">\r\n                    {{ analysisResults.overallStats.totalEnergyConsumed != null ? analysisResults.overallStats.totalEnergyConsumed.toFixed(2) : 'N/A' }} \r\n                    {{ analysisResults.overallStats.unit }}\r\n                </el-descriptions-item>\r\n                <el-descriptions-item label=\"平均能耗 (每条记录)\">\r\n                    {{ analysisResults.overallStats.averageEnergyConsumedPerRecord != null ? analysisResults.overallStats.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A' }} \r\n                    {{ analysisResults.overallStats.unit }}\r\n                </el-descriptions-item>\r\n                <el-descriptions-item label=\"数据记录数\">\r\n                    {{ analysisResults.overallStats.numberOfRecords != null ? analysisResults.overallStats.numberOfRecords : 'N/A' }}\r\n                </el-descriptions-item>\r\n                 <el-descriptions-item label=\"查询参数\">\r\n                    设备: {{ analysisResults.queryParameters.deviceIds && analysisResults.queryParameters.deviceIds.length > 0 ? analysisResults.queryParameters.deviceIds.join(', ') : '全部' }} <br/>\r\n                    类型: {{ analysisResults.queryParameters.energyType || '全部' }} <br/>\r\n                    时间: {{ new Date(analysisResults.queryParameters.startTime).toLocaleString() }} - {{ new Date(analysisResults.queryParameters.endTime).toLocaleString() }}\r\n                </el-descriptions-item>\r\n            </el-descriptions>\r\n        </el-card>\r\n\r\n        <!-- Chart Display Area -->\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"24\"> <!-- Changed to full width for single trend chart -->\r\n              <el-card shadow=\"hover\" class=\"chart-card\">\r\n                <!-- Trend chart will be rendered here by ECharts -->\r\n                <div ref=\"trendChart\" style=\"height: 450px; width: 100%;\"></div>\r\n              </el-card>\r\n            </el-col>\r\n            <!-- Pie chart column can be added back if needed\r\n            <el-col :span=\"12\">\r\n              <el-card shadow=\"hover\" class=\"chart-card\">\r\n                <div slot=\"header\">能耗占比图 (示例)</div>\r\n                <div ref=\"pieChart\" style=\"height: 400px;\"></div>\r\n              </el-card>\r\n            </el-col>\r\n            -->\r\n        </el-row>\r\n        \r\n        <!-- Device Breakdown Table -->\r\n        <el-card class=\"box-card device-breakdown-card\" v-if=\"analysisResults.deviceBreakdown && analysisResults.deviceBreakdown.length > 0\">\r\n            <div slot=\"header\" class=\"clearfix\">\r\n                <span>各设备能耗细分</span>\r\n            </div>\r\n            <el-table :data=\"analysisResults.deviceBreakdown\" stripe style=\"width: 100%\" border>\r\n                <el-table-column prop=\"deviceName\" label=\"设备名称\" sortable></el-table-column>\r\n                <el-table-column prop=\"deviceId\" label=\"设备ID\" sortable width=\"120\"></el-table-column>\r\n                <el-table-column label=\"总能耗\" sortable>\r\n                    <template slot-scope=\"scope\">\r\n                        {{ scope.row.totalEnergyConsumed != null ? scope.row.totalEnergyConsumed.toFixed(2) : 'N/A' }} {{ scope.row.unit }}\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"平均能耗 (每条记录)\" sortable>\r\n                     <template slot-scope=\"scope\">\r\n                        {{ scope.row.averageEnergyConsumedPerRecord != null ? scope.row.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A' }} {{ scope.row.unit }}\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"numberOfRecords\" label=\"数据记录数\" sortable width=\"150\"></el-table-column>\r\n            </el-table>\r\n        </el-card>\r\n         <el-alert\r\n            v-else-if=\"!loading && analysisResults.overallStats && (!analysisResults.deviceBreakdown || analysisResults.deviceBreakdown.length === 0)\"\r\n            title=\"没有查询到符合条件的设备细分数据\"\r\n            type=\"info\"\r\n            show-icon\r\n            :closable=\"false\"\r\n            style=\"margin-top: 20px;\">\r\n        </el-alert>\r\n    </div>\r\n    <el-empty v-if=\"!loading && !analysisResults.overallStats\" description=\"暂无分析数据，请选择筛选条件后点击'开始分析'\"></el-empty>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'; // 1. Import ECharts\r\nimport * as XLSX from 'xlsx'; // Import XLSX\r\n\r\nexport default {\r\n  name: 'EnergyAnalysis',\r\n  data() {\r\n    return {\r\n      filters: {\r\n        deviceIds: [],\r\n        energyType: '',\r\n        timeRange: [], // [startTime, endTime] as ISO strings from date picker\r\n        timeGranularityForTrend: 'daily' // Added for API, can be configurable\r\n      },\r\n      deviceList: [],\r\n      loading: false,\r\n      trendChartInstance: null,\r\n      pieChartInstance: null, // Keep for now, implement later if needed\r\n      analysisResults: { // To store all parts of the response\r\n        queryParameters: null,\r\n        overallStats: null,\r\n        deviceBreakdown: [],\r\n        energyTrend: null\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    fetchDevices() {\r\n      this.$http.get('/api/devices')\r\n        .then(response => {\r\n          this.deviceList = response.data;\r\n        })\r\n        .catch(error => {\r\n          this.$message.error('获取设备列表失败: ' + error.message);\r\n        });\r\n    },\r\n    validateFilters() {\r\n        if (!this.filters.timeRange || this.filters.timeRange.length !== 2) {\r\n            this.$message.error('请选择分析周期！');\r\n            return false;\r\n        }\r\n        // Convert to Date objects to check validity\r\n        const startTime = new Date(this.filters.timeRange[0]);\r\n        const endTime = new Date(this.filters.timeRange[1]);\r\n\r\n        if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\r\n            this.$message.error('分析周期的日期时间格式无效！');\r\n            return false;\r\n        }\r\n        \r\n        if (startTime >= endTime) {\r\n            this.$message.error('开始时间必须早于结束时间！');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    performAnalysis() {\r\n      if (!this.validateFilters()) {\r\n          return;\r\n      }\r\n      // Note: Element UI form validation (`this.$refs.filterFormRef.validate`)\r\n      // is useful if you have specific rules on <el-form-item prop=\"xxx\">.\r\n      // Here, validateFilters() handles the primary logic.\r\n      // If filterFormRef has rules, they will also be checked.\r\n      this.$refs.filterFormRef.validate((valid) => {\r\n        if (valid) { // `valid` will be true if Element UI rules (if any) pass\r\n          this.loading = true;\r\n          const params = {\r\n            // deviceIds should be an array of Longs, Axios handles serialization\r\n            deviceIds: this.filters.deviceIds.length > 0 ? this.filters.deviceIds.join(',') : null, // Send as comma-separated string\r\n            energyType: this.filters.energyType || null, // Send null if empty\r\n            startTime: this.filters.timeRange[0], // ISO String\r\n            endTime: this.filters.timeRange[1],   // ISO String\r\n            timeGranularityForTrend: this.filters.timeGranularityForTrend\r\n          };\r\n\r\n          console.log(\"Submitting analysis params:\", params);\r\n\r\n          this.$http.get('/api/energy-stats', { params })\r\n            .then(response => {\r\n              if (response.data) {\r\n                this.analysisResults = response.data;\r\n                this.$message.success('能耗分析数据已获取!');\r\n                this.$nextTick(() => { // Ensure DOM is updated before rendering charts\r\n                    this.renderCharts();\r\n                });\r\n              } else {\r\n                this.$message.error('获取能耗分析数据失败: 响应为空');\r\n                this.clearResultsAndCharts();\r\n              }\r\n              this.loading = false;\r\n            })\r\n            .catch(error => {\r\n              let errMsg = '获取能耗分析数据失败';\r\n              if (error.response && error.response.data) {\r\n                // Try to get message from Spring Boot's default error response\r\n                if (error.response.data.message) errMsg += ': ${error.response.data.message}';\r\n                else if (error.response.data.error) errMsg += ': ${error.response.data.error}';\r\n              } else if (error.message) {\r\n                errMsg += ': ${error.message}';\r\n              }\r\n              this.$message.error(errMsg);\r\n              this.loading = false;\r\n              this.clearResultsAndCharts();\r\n            });\r\n        } else {\r\n          // This part is for Element UI's own validation messages if form rules are set\r\n          // this.$message.error('请检查筛选条件中的错误!'); // Typically Element UI shows errors directly on fields\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    clearResultsAndCharts() {\r\n        this.analysisResults = {\r\n            queryParameters: null,\r\n            overallStats: null,\r\n            deviceBreakdown: [],\r\n            energyTrend: null\r\n        };\r\n        if (this.trendChartInstance) {\r\n            this.trendChartInstance.clear();\r\n            // Optional: Dispose and nullify if you want to completely re-init next time\r\n            // this.trendChartInstance.dispose();\r\n            // this.trendChartInstance = null;\r\n        }\r\n        // if (this.pieChartInstance) { this.pieChartInstance.clear(); }\r\n    },\r\n    resetFilters() {\r\n      // Check if filterFormRef is available before calling resetFields\r\n      if (this.$refs.filterFormRef) {\r\n        this.$refs.filterFormRef.resetFields();\r\n      }\r\n      this.filters.deviceIds = [];\r\n      this.filters.energyType = '';\r\n      this.filters.timeRange = [];\r\n      this.filters.timeGranularityForTrend = 'daily';\r\n      this.clearResultsAndCharts();\r\n    },\r\n    exportDataAsCSV() {\r\n      if (!this.analysisResults || !this.analysisResults.overallStats) {\r\n        this.$message.info('没有可导出的分析数据。');\r\n        return;\r\n      }\r\n\r\n      const { queryParameters, overallStats, deviceBreakdown } = this.analysisResults;\r\n      let csvContent = \"\";\r\n\r\n      // Helper to format arrays for CSV (handles comma within strings if any by quoting)\r\n      const escapeCSV = (field) => {\r\n        if (field === null || typeof field === 'undefined') return '\"\"';\r\n        let str = String(field);\r\n        // If the field contains a comma, a quote, or a newline, enclose it in double quotes\r\n        // and escape any existing double quotes by doubling them.\r\n        if (str.search(/(\"|,|\\n)/g) >= 0) {\r\n            str = '\"' + str.replace(/\"/g, '\"\"') + '\"';\r\n        }\r\n        return str;\r\n      };\r\n      \r\n      const formatDateForCSV = (isoDateString) => {\r\n          if (!isoDateString) return 'N/A';\r\n          try {\r\n              return new Date(isoDateString).toLocaleString();\r\n          } catch (e) {\r\n              return isoDateString; // fallback to original if parsing fails\r\n          }\r\n      };\r\n\r\n      // Section 1: Query Parameters\r\n      csvContent += \"查询参数\\n\";\r\n      csvContent += \"参数名称,参数值\\n\";\r\n      csvContent += `设备IDs,${escapeCSV(queryParameters.deviceIds && queryParameters.deviceIds.length > 0 ? queryParameters.deviceIds.join(';') : '全部')}\\n`; // Use semicolon for list\r\n      csvContent += `能源类型,${escapeCSV(queryParameters.energyType || '全部')}\\n`;\r\n      csvContent += `开始时间,${escapeCSV(formatDateForCSV(queryParameters.startTime))}\\n`;\r\n      csvContent += `结束时间,${escapeCSV(formatDateForCSV(queryParameters.endTime))}\\n`;\r\n      csvContent += `趋势图粒度,${escapeCSV(queryParameters.timeGranularityForTrend || 'N/A')}\\n\\n`;\r\n\r\n      // Section 2: Overall Statistics\r\n      csvContent += \"总体能耗摘要\\n\";\r\n      csvContent += \"统计项,值,单位\\n\";\r\n      csvContent += `${escapeCSV('总能耗')},${escapeCSV(overallStats.totalEnergyConsumed != null ? overallStats.totalEnergyConsumed.toFixed(2) : 'N/A')},${escapeCSV(overallStats.unit || '')}\\n`;\r\n      csvContent += `${escapeCSV('平均能耗 (每条记录)')},${escapeCSV(overallStats.averageEnergyConsumedPerRecord != null ? overallStats.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A')},${escapeCSV(overallStats.unit || '')}\\n`;\r\n      csvContent += `${escapeCSV('数据记录数')},${escapeCSV(overallStats.numberOfRecords != null ? overallStats.numberOfRecords : 'N/A')},\\n\\n`;\r\n\r\n      // Section 3: Device Breakdown\r\n      if (deviceBreakdown && deviceBreakdown.length > 0) {\r\n        csvContent += \"各设备能耗细分\\n\";\r\n        // Header row for device breakdown\r\n        csvContent += \"设备ID,设备名称,总能耗,平均能耗 (每条记录),数据记录数,单位\\n\";\r\n        // Data rows\r\n        deviceBreakdown.forEach(device => {\r\n          csvContent += [\r\n            escapeCSV(device.deviceId),\r\n            escapeCSV(device.deviceName),\r\n            escapeCSV(device.totalEnergyConsumed != null ? device.totalEnergyConsumed.toFixed(2) : 'N/A'),\r\n            escapeCSV(device.averageEnergyConsumedPerRecord != null ? device.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A'),\r\n            escapeCSV(device.numberOfRecords),\r\n            escapeCSV(device.unit || '')\r\n          ].join(',') + \"\\n\";\r\n        });\r\n      } else {\r\n        csvContent += \"各设备能耗细分\\n\";\r\n        csvContent += \"没有查询到符合条件的设备细分数据\\n\";\r\n      }\r\n      csvContent += \"\\n\";\r\n\r\n      // Create Blob and trigger download\r\n      // UTF-8 BOM to ensure Excel opens cyrillic/special characters correctly\r\n      const BOM = \"\\uFEFF\"; \r\n      const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement(\"a\");\r\n      if (link.download !== undefined) { // Feature detection\r\n        const url = URL.createObjectURL(blob);\r\n        const reportDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\r\n        link.setAttribute(\"href\", url);\r\n        link.setAttribute(\"download\", `能耗分析报表_${reportDate}.csv`);\r\n        link.style.visibility = 'hidden';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      } else {\r\n        this.$message.error('您的浏览器不支持直接下载文件，请尝试手动复制内容。');\r\n      }\r\n    },\r\n    exportDataAsExcel() {\r\n      if (!this.analysisResults || !this.analysisResults.overallStats) {\r\n        this.$message.info('没有可导出的分析数据。');\r\n        return;\r\n      }\r\n\r\n      const { queryParameters, overallStats, deviceBreakdown } = this.analysisResults;\r\n      const reportDate = new Date().toISOString().split('T')[0];\r\n      const fileName = `能耗分析报表_${reportDate}.xlsx`;\r\n\r\n      // --- Sheet 1: Summary --- \r\n      const summaryData = [\r\n        { Item: '查询参数:', '' : '' }, // Title row\r\n        { Item: '设备IDs', Value: (queryParameters.deviceIds && queryParameters.deviceIds.length > 0 ? queryParameters.deviceIds.join('; ') : '全部') },\r\n        { Item: '能源类型', Value: (queryParameters.energyType || '全部') },\r\n        { Item: '开始时间', Value: (new Date(queryParameters.startTime).toLocaleString()) },\r\n        { Item: '结束时间', Value: (new Date(queryParameters.endTime).toLocaleString()) },\r\n        { Item: '趋势图粒度', Value: (queryParameters.timeGranularityForTrend || 'N/A') },\r\n        { Item: '', '' : '' }, // Spacer row\r\n        { Item: '总体能耗摘要:', '' : '' }, // Title row\r\n        { Item: '总能耗', Value: (overallStats.totalEnergyConsumed != null ? overallStats.totalEnergyConsumed.toFixed(2) : 'N/A'), Unit: (overallStats.unit || '') },\r\n        { Item: '平均能耗 (每条记录)', Value: (overallStats.averageEnergyConsumedPerRecord != null ? overallStats.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A'), Unit: (overallStats.unit || '') },\r\n        { Item: '数据记录数', Value: (overallStats.numberOfRecords != null ? overallStats.numberOfRecords : 'N/A') },\r\n      ];\r\n      const wsSummary = XLSX.utils.json_to_sheet(summaryData, { skipHeader: true }); // skipHeader to manually control layout or use aoa_to_sheet for more control\r\n      // Set column widths for summary sheet (optional)\r\n      wsSummary['!cols'] = [{ wch: 25 }, { wch: 40 }, { wch: 10 }]; \r\n\r\n\r\n      // --- Sheet 2: Device Breakdown --- \r\n      let wsDeviceBreakdown = null;\r\n      if (deviceBreakdown && deviceBreakdown.length > 0) {\r\n        // Prepare data for sheet: rename headers for clarity if needed\r\n        const deviceDataForSheet = deviceBreakdown.map(d => ({\r\n          '设备ID': d.deviceId,\r\n          '设备名称': d.deviceName,\r\n          '总能耗': d.totalEnergyConsumed != null ? d.totalEnergyConsumed.toFixed(2) : 'N/A',\r\n          '平均能耗(每条记录)': d.averageEnergyConsumedPerRecord != null ? d.averageEnergyConsumedPerRecord.toFixed(2) : 'N/A',\r\n          '数据记录数': d.numberOfRecords,\r\n          '单位': d.unit || ''\r\n        }));\r\n        wsDeviceBreakdown = XLSX.utils.json_to_sheet(deviceDataForSheet);\r\n        // Set column widths for device breakdown sheet (optional)\r\n        wsDeviceBreakdown['!cols'] = [\r\n            { wch: 10 }, { wch: 25 }, { wch: 12 }, \r\n            { wch: 20 }, { wch: 12 }, { wch: 8 }\r\n        ];\r\n      } else {\r\n        // Create a sheet indicating no data if breakdown is empty\r\n        wsDeviceBreakdown = XLSX.utils.json_to_sheet([{ Message: '没有查询到符合条件的设备细分数据' }]);\r\n      }\r\n\r\n      // --- Create Workbook and Download --- \r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, wsSummary, \"查询与摘要\");\r\n      XLSX.utils.book_append_sheet(wb, wsDeviceBreakdown, \"设备能耗明细\");\r\n\r\n      XLSX.writeFile(wb, fileName);\r\n      this.$message.success('Excel报表已开始下载。');\r\n    },\r\n    renderCharts() {\r\n      if (!this.$refs.trendChart) { // Ensure the ref is available\r\n          console.warn(\"Trend chart ref not found, cannot render.\");\r\n          return;\r\n      }\r\n      if (!this.analysisResults || !this.analysisResults.energyTrend || !this.analysisResults.energyTrend.timeLabels) {\r\n        if (this.trendChartInstance) this.trendChartInstance.clear();\r\n        console.log(\"No trend data to render or chart instance not ready.\");\r\n        return;\r\n      }\r\n\r\n      const trendData = this.analysisResults.energyTrend;\r\n      \r\n      if (!this.trendChartInstance) {\r\n        try {\r\n            this.trendChartInstance = echarts.init(this.$refs.trendChart);\r\n        } catch (e) {\r\n            console.error(\"Failed to initialize trend chart:\", e);\r\n            this.$message.error(\"图表初始化失败，请刷新页面或检查控制台。\");\r\n            return;\r\n        }\r\n      }\r\n      \r\n      const yAxisUnit = trendData.datasets && trendData.datasets.length > 0 && trendData.datasets[0].unit \r\n                        ? trendData.datasets[0].unit \r\n                        : '';\r\n\r\n      const trendOption = {\r\n        title: {\r\n          text: '能耗趋势图',\r\n          left: 'center'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: (params) => { // Custom tooltip formatter\r\n            let tooltipHtml = params[0].name + '<br/>'; // Time label\r\n            params.forEach(item => {\r\n              tooltipHtml += `${item.marker} ${item.seriesName}: ${item.value != null ? item.value.toFixed(2) : 'N/A'} ${yAxisUnit}<br/>`;\r\n            });\r\n            return tooltipHtml;\r\n          }\r\n        },\r\n        legend: {\r\n          data: trendData.datasets ? trendData.datasets.map(ds => ds.label) : [],\r\n          top: 'bottom'\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '10%', // Adjusted for legend at bottom\r\n          containLabel: true\r\n        },\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: { title: '保存为图片' }\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: trendData.timeLabels || []\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLabel: {\r\n            formatter: `{value} ${yAxisUnit}`\r\n          }\r\n        },\r\n        dataZoom: [ // Add data zoom for better navigation on large datasets\r\n            {\r\n                type: 'slider',\r\n                start: 0,\r\n                end: 100,\r\n                xAxisIndex: 0,\r\n                filterMode: 'empty'\r\n            },\r\n            {\r\n                type: 'inside',\r\n                start: 0,\r\n                end: 100,\r\n                xAxisIndex: 0,\r\n                filterMode: 'empty'\r\n            }\r\n        ],\r\n        series: trendData.datasets ? trendData.datasets.map(ds => ({\r\n          name: ds.label,\r\n          type: 'line',\r\n          data: ds.data || [],\r\n          smooth: true,\r\n          itemStyle: { /*Можно добавить стили для линий/точек*/ },\r\n          lineStyle: { /*Можно добавить стили для линий*/ }\r\n        })) : []\r\n      };\r\n      this.trendChartInstance.setOption(trendOption, true); // true to not merge with previous options\r\n    },\r\n    handleResize() { \r\n        this.$nextTick(() => { // Ensure resize happens after any DOM updates\r\n            if (this.trendChartInstance) {\r\n                this.trendChartInstance.resize();\r\n            }\r\n            // if (this.pieChartInstance) { this.pieChartInstance.resize(); }\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n    // Consider fetching devices only if deviceList is empty or on demand\r\n    if(this.deviceList.length === 0) {\r\n        this.fetchDevices();\r\n    }\r\n  },\r\n  created() {\r\n    // fetchDevices moved to mounted to ensure $http is available if it relies on global setup.\r\n    // However, typically it's fine in created(). If issues, move back to created() or ensure $http setup.\r\n  },\r\n  beforeDestroy() {\r\n    if (this.trendChartInstance) {\r\n      this.trendChartInstance.dispose();\r\n      this.trendChartInstance = null;\r\n    }\r\n    // if (this.pieChartInstance) { this.pieChartInstance.dispose(); this.pieChartInstance = null; }\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-analysis-container {\r\n  padding: 20px;\r\n}\r\n.filter-card, .stats-summary-card, .chart-card, .device-breakdown-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-form .el-form-item {\r\n  margin-bottom: 10px; /* Reduce bottom margin for denser form */\r\n}\r\n\r\n/* Make sure chart resizes correctly within its container */\r\n.chart-card div[ref=\"trendChart\"] {\r\n    width: 100%; /* Ensure ECharts takes full width of its parent */\r\n}\r\n\r\n.loading-overlay {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    z-index: 2000; /* High z-index to overlay other content */\r\n}\r\n.el-descriptions {\r\n    margin-top: 15px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}