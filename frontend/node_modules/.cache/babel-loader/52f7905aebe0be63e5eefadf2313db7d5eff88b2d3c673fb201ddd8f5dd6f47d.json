{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from '../store'; // 引入 Vuex store\n// 懒加载组件，提高初始加载速度\nconst Login = () => import(/* webpackChunkName: \"login\" */'../views/Login.vue');\nconst Register = () => import(/* webpackChunkName: \"register\" */'../views/Register.vue');\nconst Dashboard = () => import(/* webpackChunkName: \"dashboard\" */'../views/Dashboard.vue');\nconst MainLayout = () => import(/* webpackChunkName: \"layout\" */'../views/MainLayout.vue');\nconst EnergyDataManagement = () => import(/* webpackChunkName: \"energy\" */'../views/EnergyDataManagement.vue');\nconst DeviceManagement = () => import(/* webpackChunkName: \"device\" */'../views/DeviceManagement.vue');\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  redirect: '/login' // 默认重定向到登录页\n}, {\n  path: '/login',\n  name: 'Login',\n  component: Login\n}, {\n  path: '/register',\n  name: 'Register',\n  component: Register\n}, {\n  path: '/app',\n  component: MainLayout,\n  // 使用主布局组件\n  children: [{\n    path: 'dashboard',\n    name: 'Dashboard',\n    component: Dashboard,\n    meta: {\n      requiresAuth: true\n    } // 示例：标记需要登录的路由\n  }, {\n    path: 'energy-data',\n    name: 'EnergyDataManagement',\n    component: EnergyDataManagement,\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: 'devices',\n    name: 'DeviceManagement',\n    component: DeviceManagement,\n    meta: {\n      requiresAuth: true\n    }\n  }\n  // 可以在这里继续添加其他子路由\n  ]\n}\n// 你可以在这里添加更多的路由\n];\nconst router = new VueRouter({\n  mode: 'history',\n  // 使用 history 模式，需要后端配合处理URL刷新\n  base: process.env.BASE_URL,\n  routes\n});\n\n// 路由守卫\nrouter.beforeEach((to, from, next) => {\n  // 从 Vuex store 获取认证状态\n  // 确保在 store 初始化之后，特别是 fetchUser action 执行之后再准确获取\n  // 对于首次加载，store.state.auth.user 可能还未从 localStorage恢复\n  // 一个更稳妥的方式是检查 localStorage 或者等待 store 初始化完成\n  // 但直接用 getter 也是常见做法，依赖于 store/index.js 中 fetchUser 的同步性（或异步后的状态）\n\n  let isAuthenticated = store.getters['auth/isAuthenticated'];\n\n  // 如果 store 中的 user 状态尚未通过 fetchUser 从 localStorage 初始化，\n  // 我们可以尝试直接检查 localStorage 作为备用方案，但这会使逻辑分散。\n  // 更好的做法是确保 fetchUser 在应用初始化时被调用。\n  if (!isAuthenticated) {\n    const storedUser = localStorage.getItem('user-info');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        // 临时在守卫中提交，以确保状态同步，但这通常应由 store action 处理\n        store.commit('auth/SET_USER', user);\n        isAuthenticated = true; // 更新本地的 isAuthenticated 状态\n      } catch (e) {\n        localStorage.removeItem('user-info');\n      }\n    }\n  }\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // 检查目标路由是否需要认证\n    if (!isAuthenticated) {\n      // 如果需要认证但用户未认证\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        } // 重定向到登录页，并保存原始目标路径\n      });\n    } else {\n      // 用户已认证\n      next(); // 继续导航\n    }\n  } else if ((to.path === '/login' || to.path === '/register') && isAuthenticated) {\n    // 如果用户已认证，但尝试访问登录或注册页\n    next('/app/dashboard'); // 重定向到仪表盘或默认的认证后页面\n  } else {\n    // 对于不需要认证的路由，或者其他情况\n    next(); // 总是确保调用 next()\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","Login","Register","Dashboard","MainLayout","EnergyDataManagement","DeviceManagement","use","routes","path","redirect","name","component","children","meta","requiresAuth","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","isAuthenticated","getters","storedUser","localStorage","getItem","user","JSON","parse","commit","e","removeItem","matched","some","record","query","fullPath"],"sources":["C:/Users/吴泽宇/Desktop/医院智慧能源管理系统/hospital-energy-management/frontend/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport store from '../store'; // 引入 Vuex store\r\n// 懒加载组件，提高初始加载速度\r\nconst Login = () => import(/* webpackChunkName: \"login\" */ '../views/Login.vue')\r\nconst Register = () => import(/* webpackChunkName: \"register\" */ '../views/Register.vue')\r\nconst Dashboard = () => import(/* webpackChunkName: \"dashboard\" */ '../views/Dashboard.vue')\r\nconst MainLayout = () => import(/* webpackChunkName: \"layout\" */ '../views/MainLayout.vue')\r\nconst EnergyDataManagement = () => import(/* webpackChunkName: \"energy\" */ '../views/EnergyDataManagement.vue');\r\nconst DeviceManagement = () => import(/* webpackChunkName: \"device\" */ '../views/DeviceManagement.vue');\r\n\r\nVue.use(VueRouter)\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    redirect: '/login' // 默认重定向到登录页\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: Login\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'Register',\r\n    component: Register\r\n  },\r\n  {\r\n    path: '/app',\r\n    component: MainLayout, // 使用主布局组件\r\n    children: [\r\n      {\r\n        path: 'dashboard',\r\n        name: 'Dashboard',\r\n        component: Dashboard,\r\n        meta: { requiresAuth: true } // 示例：标记需要登录的路由\r\n      },\r\n      {\r\n        path: 'energy-data',\r\n        name: 'EnergyDataManagement',\r\n        component: EnergyDataManagement,\r\n        meta: { requiresAuth: true }\r\n      },\r\n      {\r\n        path: 'devices',\r\n        name: 'DeviceManagement',\r\n        component: DeviceManagement,\r\n        meta: { requiresAuth: true }\r\n      }\r\n      // 可以在这里继续添加其他子路由\r\n    ]\r\n  }\r\n  // 你可以在这里添加更多的路由\r\n]\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history', // 使用 history 模式，需要后端配合处理URL刷新\r\n  base: process.env.BASE_URL,\r\n  routes\r\n})\r\n\r\n// 路由守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  // 从 Vuex store 获取认证状态\r\n  // 确保在 store 初始化之后，特别是 fetchUser action 执行之后再准确获取\r\n  // 对于首次加载，store.state.auth.user 可能还未从 localStorage恢复\r\n  // 一个更稳妥的方式是检查 localStorage 或者等待 store 初始化完成\r\n  // 但直接用 getter 也是常见做法，依赖于 store/index.js 中 fetchUser 的同步性（或异步后的状态）\r\n  \r\n  let isAuthenticated = store.getters['auth/isAuthenticated'];\r\n\r\n  // 如果 store 中的 user 状态尚未通过 fetchUser 从 localStorage 初始化，\r\n  // 我们可以尝试直接检查 localStorage 作为备用方案，但这会使逻辑分散。\r\n  // 更好的做法是确保 fetchUser 在应用初始化时被调用。\r\n  if (!isAuthenticated) {\r\n      const storedUser = localStorage.getItem('user-info');\r\n      if (storedUser) {\r\n          try {\r\n              const user = JSON.parse(storedUser);\r\n              // 临时在守卫中提交，以确保状态同步，但这通常应由 store action 处理\r\n              store.commit('auth/SET_USER', user);\r\n              isAuthenticated = true; // 更新本地的 isAuthenticated 状态\r\n          } catch (e) {\r\n              localStorage.removeItem('user-info');\r\n          }\r\n      }\r\n  }\r\n\r\n  if (to.matched.some(record => record.meta.requiresAuth)) { // 检查目标路由是否需要认证\r\n    if (!isAuthenticated) { // 如果需要认证但用户未认证\r\n      next({\r\n        path: '/login',\r\n        query: { redirect: to.fullPath } // 重定向到登录页，并保存原始目标路径\r\n      });\r\n    } else { // 用户已认证\r\n      next(); // 继续导航\r\n    }\r\n  } else if ((to.path === '/login' || to.path === '/register') && isAuthenticated) { // 如果用户已认证，但尝试访问登录或注册页\r\n    next('/app/dashboard'); // 重定向到仪表盘或默认的认证后页面\r\n  } else { // 对于不需要认证的路由，或者其他情况\r\n    next(); // 总是确保调用 next()\r\n  }\r\n});\r\n\r\nexport default router "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}