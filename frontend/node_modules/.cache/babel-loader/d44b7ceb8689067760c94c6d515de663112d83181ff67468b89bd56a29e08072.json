{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\nconst authModule = {\n  namespaced: true,\n  state: {\n    user: null,\n    // 用户信息对象\n    currentUser: null\n    // token: localStorage.getItem('user-token') || '' // No more token\n  },\n  mutations: {\n    // SET_TOKEN(state, token) { // No more token\n    //   state.token = token;\n    //   localStorage.setItem('user-token', token);\n    //   axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    // },\n    // CLEAR_TOKEN(state) { // No more token\n    //   state.token = '';\n    //   localStorage.removeItem('user-token');\n    //   delete axios.defaults.headers.common['Authorization'];\n    // },\n    SET_USER(state, user) {\n      state.user = user; // user might be null to clear it\n      state.currentUser = user; // Keep currentUser in sync with user\n      if (user) {\n        localStorage.setItem('user-info', JSON.stringify(user)); // Store user info\n      } else {\n        localStorage.removeItem('user-info'); // Clear user info\n      }\n    },\n    CLEAR_USER(state) {\n      // Combined into SET_USER(state, null)\n      state.user = null;\n      localStorage.removeItem('user-info');\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('/api/auth/signin', credentials);\n        // Backend now returns UserLoginResponse: { id, username, email, roles, message }\n        const userData = response.data;\n        if (userData && userData.username) {\n          // Check if login was successful based on response\n          const user = {\n            id: userData.id,\n            username: userData.username,\n            email: userData.email,\n            roles: userData.roles,\n            enabled: userData.enabled\n          };\n          commit('SET_USER', user);\n          return Promise.resolve(user);\n        } else {\n          // If backend doesn't send username, assume login failed or unexpected response\n          throw new Error(userData.message || 'Login failed: Unexpected response from server.');\n        }\n      } catch (error) {\n        commit('SET_USER', null); // Clear user on login failure\n        const errorMessage = error.response && error.response.data && error.response.data.message ? error.response.data.message : error.message || 'Login failed due to an unexpected error.';\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    async register(_context, userData) {\n      try {\n        const response = await axios.post('/api/auth/signup', userData);\n        return Promise.resolve(response.data);\n      } catch (error) {\n        const errorMessage = error.response && error.response.data && error.response.data.message ? error.response.data.message : error.message || 'Registration failed due to an unexpected error.';\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    logout({\n      commit\n    }) {\n      commit('SET_USER', null); // Clear user from state and localStorage\n      // No token to clear from axios headers anymore\n      return Promise.resolve();\n    },\n    fetchUser({\n      commit\n    }) {\n      // Simplified fetchUser\n      const storedUser = localStorage.getItem('user-info');\n      if (storedUser) {\n        try {\n          const user = JSON.parse(storedUser);\n          commit('SET_USER', user); // Restore user from localStorage\n          return Promise.resolve(user);\n        } catch (e) {\n          localStorage.removeItem('user-info'); // Corrupted data\n          return Promise.reject(e);\n        }\n      }\n      return Promise.resolve(null);\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.user,\n    // Authenticated if user object exists\n    currentUser: state => state.user,\n    userRole: state => state.user && state.user.roles && state.user.roles.length > 0 ? state.user.roles[0] : null\n  }\n};\nexport default new Vuex.Store({\n  modules: {\n    auth: authModule\n  }\n  // 你可以在这里添加更多的模块\n});","map":{"version":3,"names":["Vue","Vuex","axios","use","authModule","namespaced","state","user","currentUser","mutations","SET_USER","localStorage","setItem","JSON","stringify","removeItem","CLEAR_USER","actions","login","commit","credentials","response","post","userData","data","username","id","email","roles","enabled","Promise","resolve","Error","message","error","errorMessage","reject","register","_context","logout","fetchUser","storedUser","getItem","parse","e","getters","isAuthenticated","userRole","length","Store","modules","auth"],"sources":["C:/Users/吴泽宇/Desktop/hospital-energy-management/frontend/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios';\n\nVue.use(Vuex)\n\nconst authModule = {\n  namespaced: true,\n  state: {\n    user: null, // 用户信息对象\n    currentUser: null\n    // token: localStorage.getItem('user-token') || '' // No more token\n  },\n  mutations: {\n    // SET_TOKEN(state, token) { // No more token\n    //   state.token = token;\n    //   localStorage.setItem('user-token', token);\n    //   axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    // },\n    // CLEAR_TOKEN(state) { // No more token\n    //   state.token = '';\n    //   localStorage.removeItem('user-token');\n    //   delete axios.defaults.headers.common['Authorization'];\n    // },\n    SET_USER(state, user) {\n      state.user = user; // user might be null to clear it\n      state.currentUser = user; // Keep currentUser in sync with user\n      if (user) {\n        localStorage.setItem('user-info', JSON.stringify(user)); // Store user info\n      } else {\n        localStorage.removeItem('user-info'); // Clear user info\n      }\n    },\n    CLEAR_USER(state) { // Combined into SET_USER(state, null)\n      state.user = null;\n      localStorage.removeItem('user-info');\n    }\n  },\n  actions: {\n    async login({ commit }, credentials) {\n      try {\n        const response = await axios.post('/api/auth/signin', credentials);\n        // Backend now returns UserLoginResponse: { id, username, email, roles, message }\n        const userData = response.data;\n        if (userData && userData.username) { // Check if login was successful based on response\n          const user = {\n            id: userData.id,\n            username: userData.username,\n            email: userData.email,\n            roles: userData.roles,\n            enabled: userData.enabled\n          };\n          commit('SET_USER', user);\n          return Promise.resolve(user);\n        } else {\n          // If backend doesn't send username, assume login failed or unexpected response\n          throw new Error(userData.message || 'Login failed: Unexpected response from server.');\n        }\n      } catch (error) {\n        commit('SET_USER', null); // Clear user on login failure\n        const errorMessage = error.response && error.response.data && error.response.data.message\n                           ? error.response.data.message\n                           : (error.message || 'Login failed due to an unexpected error.');\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    async register(_context, userData) {\n      try {\n        const response = await axios.post('/api/auth/signup', userData);\n        return Promise.resolve(response.data);\n      } catch (error) {\n        const errorMessage = error.response && error.response.data && error.response.data.message\n                           ? error.response.data.message\n                           : (error.message || 'Registration failed due to an unexpected error.');\n        return Promise.reject(new Error(errorMessage));\n      }\n    },\n    logout({ commit }) {\n      commit('SET_USER', null); // Clear user from state and localStorage\n      // No token to clear from axios headers anymore\n      return Promise.resolve();\n    },\n    fetchUser({ commit }) { // Simplified fetchUser\n      const storedUser = localStorage.getItem('user-info');\n      if (storedUser) {\n        try {\n          const user = JSON.parse(storedUser);\n          commit('SET_USER', user); // Restore user from localStorage\n          return Promise.resolve(user);\n        } catch (e) {\n          localStorage.removeItem('user-info'); // Corrupted data\n          return Promise.reject(e);\n        }\n      }\n      return Promise.resolve(null);\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.user, // Authenticated if user object exists\n    currentUser: state => state.user,\n    userRole: state => (state.user && state.user.roles && state.user.roles.length > 0) ? state.user.roles[0] : null\n  }\n}\n\nexport default new Vuex.Store({\n  modules: {\n    auth: authModule\n  }\n  // 你可以在这里添加更多的模块\n}) "],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AAEzBF,GAAG,CAACG,GAAG,CAACF,IAAI,CAAC;AAEb,MAAMG,UAAU,GAAG;EACjBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,IAAI,EAAE,IAAI;IAAE;IACZC,WAAW,EAAE;IACb;EACF,CAAC;EACDC,SAAS,EAAE;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,QAAQA,CAACJ,KAAK,EAAEC,IAAI,EAAE;MACpBD,KAAK,CAACC,IAAI,GAAGA,IAAI,CAAC,CAAC;MACnBD,KAAK,CAACE,WAAW,GAAGD,IAAI,CAAC,CAAC;MAC1B,IAAIA,IAAI,EAAE;QACRI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC;MAC3D,CAAC,MAAM;QACLI,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;MACxC;IACF,CAAC;IACDC,UAAUA,CAACV,KAAK,EAAE;MAAE;MAClBA,KAAK,CAACC,IAAI,GAAG,IAAI;MACjBI,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;IACtC;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEC,WAAW,EAAE;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,kBAAkB,EAAEF,WAAW,CAAC;QAClE;QACA,MAAMG,QAAQ,GAAGF,QAAQ,CAACG,IAAI;QAC9B,IAAID,QAAQ,IAAIA,QAAQ,CAACE,QAAQ,EAAE;UAAE;UACnC,MAAMlB,IAAI,GAAG;YACXmB,EAAE,EAAEH,QAAQ,CAACG,EAAE;YACfD,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;YAC3BE,KAAK,EAAEJ,QAAQ,CAACI,KAAK;YACrBC,KAAK,EAAEL,QAAQ,CAACK,KAAK;YACrBC,OAAO,EAAEN,QAAQ,CAACM;UACpB,CAAC;UACDV,MAAM,CAAC,UAAU,EAAEZ,IAAI,CAAC;UACxB,OAAOuB,OAAO,CAACC,OAAO,CAACxB,IAAI,CAAC;QAC9B,CAAC,MAAM;UACL;UACA,MAAM,IAAIyB,KAAK,CAACT,QAAQ,CAACU,OAAO,IAAI,gDAAgD,CAAC;QACvF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdf,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1B,MAAMgB,YAAY,GAAGD,KAAK,CAACb,QAAQ,IAAIa,KAAK,CAACb,QAAQ,CAACG,IAAI,IAAIU,KAAK,CAACb,QAAQ,CAACG,IAAI,CAACS,OAAO,GACpEC,KAAK,CAACb,QAAQ,CAACG,IAAI,CAACS,OAAO,GAC1BC,KAAK,CAACD,OAAO,IAAI,0CAA2C;QAClF,OAAOH,OAAO,CAACM,MAAM,CAAC,IAAIJ,KAAK,CAACG,YAAY,CAAC,CAAC;MAChD;IACF,CAAC;IACD,MAAME,QAAQA,CAACC,QAAQ,EAAEf,QAAQ,EAAE;MACjC,IAAI;QACF,MAAMF,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,kBAAkB,EAAEC,QAAQ,CAAC;QAC/D,OAAOO,OAAO,CAACC,OAAO,CAACV,QAAQ,CAACG,IAAI,CAAC;MACvC,CAAC,CAAC,OAAOU,KAAK,EAAE;QACd,MAAMC,YAAY,GAAGD,KAAK,CAACb,QAAQ,IAAIa,KAAK,CAACb,QAAQ,CAACG,IAAI,IAAIU,KAAK,CAACb,QAAQ,CAACG,IAAI,CAACS,OAAO,GACpEC,KAAK,CAACb,QAAQ,CAACG,IAAI,CAACS,OAAO,GAC1BC,KAAK,CAACD,OAAO,IAAI,iDAAkD;QACzF,OAAOH,OAAO,CAACM,MAAM,CAAC,IAAIJ,KAAK,CAACG,YAAY,CAAC,CAAC;MAChD;IACF,CAAC;IACDI,MAAMA,CAAC;MAAEpB;IAAO,CAAC,EAAE;MACjBA,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;MAC1B;MACA,OAAOW,OAAO,CAACC,OAAO,CAAC,CAAC;IAC1B,CAAC;IACDS,SAASA,CAAC;MAAErB;IAAO,CAAC,EAAE;MAAE;MACtB,MAAMsB,UAAU,GAAG9B,YAAY,CAAC+B,OAAO,CAAC,WAAW,CAAC;MACpD,IAAID,UAAU,EAAE;QACd,IAAI;UACF,MAAMlC,IAAI,GAAGM,IAAI,CAAC8B,KAAK,CAACF,UAAU,CAAC;UACnCtB,MAAM,CAAC,UAAU,EAAEZ,IAAI,CAAC,CAAC,CAAC;UAC1B,OAAOuB,OAAO,CAACC,OAAO,CAACxB,IAAI,CAAC;QAC9B,CAAC,CAAC,OAAOqC,CAAC,EAAE;UACVjC,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;UACtC,OAAOe,OAAO,CAACM,MAAM,CAACQ,CAAC,CAAC;QAC1B;MACF;MACA,OAAOd,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;IAC9B;EACF,CAAC;EACDc,OAAO,EAAE;IACPC,eAAe,EAAExC,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,IAAI;IAAE;IACxCC,WAAW,EAAEF,KAAK,IAAIA,KAAK,CAACC,IAAI;IAChCwC,QAAQ,EAAEzC,KAAK,IAAKA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,CAACqB,KAAK,IAAItB,KAAK,CAACC,IAAI,CAACqB,KAAK,CAACoB,MAAM,GAAG,CAAC,GAAI1C,KAAK,CAACC,IAAI,CAACqB,KAAK,CAAC,CAAC,CAAC,GAAG;EAC7G;AACF,CAAC;AAED,eAAe,IAAI3B,IAAI,CAACgD,KAAK,CAAC;EAC5BC,OAAO,EAAE;IACPC,IAAI,EAAE/C;EACR;EACA;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}