{"ast":null,"code":"const defaultEnergyForm = {\n  deviceId: null,\n  recordTime: new Date(),\n  // Default to current time\n  energyValue: 0,\n  energyUnit: 'kWh',\n  notes: ''\n};\nexport default {\n  name: 'EnergyDataEntry',\n  data() {\n    return {\n      energyForm: {\n        ...defaultEnergyForm\n      },\n      deviceList: [],\n      loading: false,\n      energyFormRules: {\n        deviceId: [{\n          required: true,\n          message: '请选择一个设备',\n          trigger: 'change'\n        }],\n        recordTime: [{\n          required: true,\n          message: '请选择记录时间',\n          trigger: 'change'\n        }],\n        energyValue: [{\n          required: true,\n          message: '请输入能耗数值',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          message: '能耗值必须为数字'\n        }],\n        energyUnit: [{\n          required: true,\n          message: '请输入能耗单位',\n          trigger: 'blur'\n        }]\n        // notes is optional\n      }\n    };\n  },\n  created() {\n    this.fetchDeviceList();\n    this.energyForm.recordTime = this.formatDateForPicker(new Date());\n  },\n  methods: {\n    formatDateForPicker(date) {\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const seconds = date.getSeconds().toString().padStart(2, '0');\n      return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n    },\n    async fetchDeviceList() {\n      try {\n        const response = await this.$http.get('/devices');\n        this.deviceList = response.data || [];\n      } catch (error) {\n        console.error(\"获取设备列表失败:\", error);\n        this.$message.error('获取设备列表失败，请稍后重试。');\n        this.deviceList = [];\n      }\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(async valid => {\n        if (valid) {\n          this.loading = true;\n          try {\n            let submissionData = {\n              ...this.energyForm\n            };\n            if (submissionData.recordTime instanceof Date) {\n              submissionData.recordTime = this.formatDateForPicker(submissionData.recordTime);\n            }\n            await this.$http.post('/energy-data', submissionData);\n            this.$message.success('能源数据录入成功!');\n            this.resetForm(formName);\n          } catch (error) {\n            console.error(\"能源数据录入失败:\", error);\n            const errorMsg = error.response && error.response.data && (typeof error.response.data === 'string' ? error.response.data : error.response.data.message) ? typeof error.response.data === 'string' ? error.response.data : error.response.data.message : '操作失败，请检查输入或稍后重试。';\n            this.$message.error(errorMsg);\n          } finally {\n            this.loading = false;\n          }\n        } else {\n          console.log('表单校验失败!');\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n      this.energyForm = {\n        ...defaultEnergyForm,\n        recordTime: this.formatDateForPicker(new Date())\n      };\n    }\n  }\n};","map":{"version":3,"names":["defaultEnergyForm","deviceId","recordTime","Date","energyValue","energyUnit","notes","name","data","energyForm","deviceList","loading","energyFormRules","required","message","trigger","type","created","fetchDeviceList","formatDateForPicker","methods","date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","response","$http","get","error","console","$message","submitForm","formName","$refs","validate","valid","submissionData","post","success","resetForm","errorMsg","log","resetFields"],"sources":["src/views/EnergyDataEntry.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-data-entry\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能源数据录入</span>\r\n      </div>\r\n      <el-form :model=\"energyForm\" ref=\"energyFormRef\" :rules=\"energyFormRules\" label-width=\"120px\" style=\"width: 60%; margin: auto;\">\r\n        <el-form-item label=\"选择设备\" prop=\"deviceId\">\r\n          <el-select v-model=\"energyForm.deviceId\" placeholder=\"请选择设备\" style=\"width: 100%;\" filterable clearable>\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + (device.model ? ' (' + device.model + ')' : '')\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"记录时间\" prop=\"recordTime\">\r\n          <el-date-picker\r\n            v-model=\"energyForm.recordTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"选择记录时间\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\" \r\n            style=\"width: 100%;\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"能耗数值\" prop=\"energyValue\">\r\n          <el-input-number v-model=\"energyForm.energyValue\" :precision=\"2\" :step=\"0.1\" :min=\"0\" placeholder=\"请输入能耗数值\" style=\"width: 100%;\"></el-input-number>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"能耗单位\" prop=\"energyUnit\">\r\n          <el-input v-model=\"energyForm.energyUnit\" placeholder=\"例如: kWh, m³, kg\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"备注\" prop=\"notes\">\r\n          <el-input type=\"textarea\" v-model=\"energyForm.notes\" placeholder=\"请输入备注信息 (可选)\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item style=\"text-align: center;\">\r\n          <el-button type=\"primary\" @click=\"submitForm('energyFormRef')\" :loading=\"loading\">提 交</el-button>\r\n          <el-button @click=\"resetForm('energyFormRef')\">重 置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst defaultEnergyForm = {\r\n  deviceId: null,\r\n  recordTime: new Date(), // Default to current time\r\n  energyValue: 0,\r\n  energyUnit: 'kWh',\r\n  notes: ''\r\n};\r\n\r\nexport default {\r\n  name: 'EnergyDataEntry',\r\n  data() {\r\n    return {\r\n      energyForm: { ...defaultEnergyForm },\r\n      deviceList: [],\r\n      loading: false,\r\n      energyFormRules: {\r\n        deviceId: [\r\n          { required: true, message: '请选择一个设备', trigger: 'change' }\r\n        ],\r\n        recordTime: [\r\n          { required: true, message: '请选择记录时间', trigger: 'change' }\r\n        ],\r\n        energyValue: [\r\n          { required: true, message: '请输入能耗数值', trigger: 'blur' },\r\n          { type: 'number', message: '能耗值必须为数字'}\r\n        ],\r\n        energyUnit: [\r\n          { required: true, message: '请输入能耗单位', trigger: 'blur' }\r\n        ]\r\n        // notes is optional\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchDeviceList();\r\n    this.energyForm.recordTime = this.formatDateForPicker(new Date());\r\n  },\r\n  methods: {\r\n    formatDateForPicker(date) {\r\n      const year = date.getFullYear();\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      const hours = date.getHours().toString().padStart(2, '0');\r\n      const minutes = date.getMinutes().toString().padStart(2, '0');\r\n      const seconds = date.getSeconds().toString().padStart(2, '0');\r\n      return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\r\n    },\r\n    async fetchDeviceList() {\r\n      try {\r\n        const response = await this.$http.get('/devices');\r\n        this.deviceList = response.data || [];\r\n      } catch (error) {\r\n        console.error(\"获取设备列表失败:\", error);\r\n        this.$message.error('获取设备列表失败，请稍后重试。');\r\n        this.deviceList = [];\r\n      }\r\n    },\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(async (valid) => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          try {\r\n            let submissionData = { ...this.energyForm };\r\n            if (submissionData.recordTime instanceof Date) {\r\n              submissionData.recordTime = this.formatDateForPicker(submissionData.recordTime);\r\n            }\r\n\r\n            await this.$http.post('/energy-data', submissionData);\r\n            this.$message.success('能源数据录入成功!');\r\n            this.resetForm(formName);\r\n          } catch (error) {\r\n            console.error(\"能源数据录入失败:\", error);\r\n            const errorMsg = error.response && error.response.data && (typeof error.response.data === 'string' ? error.response.data : error.response.data.message) \r\n                             ? (typeof error.response.data === 'string' ? error.response.data : error.response.data.message)\r\n                             : '操作失败，请检查输入或稍后重试。';\r\n            this.$message.error(errorMsg);\r\n          } finally {\r\n            this.loading = false;\r\n          }\r\n        } else {\r\n          console.log('表单校验失败!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n      this.energyForm = { \r\n        ...defaultEnergyForm,\r\n        recordTime: this.formatDateForPicker(new Date()) \r\n       };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-data-entry {\r\n  padding: 20px;\r\n}\r\n.box-card {\r\n  min-height: calc(100vh - 130px);\r\n}\r\n.el-form {\r\n    max-width: 700px;\r\n    margin: 20px auto;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}