{"ast":null,"code":"export default {\n  name: 'EnergyDataEntry',\n  data() {\n    return {\n      formData: {\n        deviceId: null,\n        recordTime: '',\n        energyValue: 0,\n        energyUnit: 'kWh',\n        notes: ''\n      },\n      deviceList: [],\n      rules: {\n        deviceId: [{\n          required: true,\n          message: '请选择设备',\n          trigger: 'change'\n        }],\n        recordTime: [{\n          required: true,\n          message: '请选择记录时间',\n          trigger: 'change'\n        }],\n        energyValue: [{\n          required: true,\n          message: '请输入能耗值',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          message: '能耗值必须为数字'\n        }],\n        energyUnit: [{\n          required: true,\n          message: '请输入单位',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    fetchDevices() {\n      this.$http.get('/api/devices').then(response => {\n        this.deviceList = response.data;\n      }).catch(error => {\n        this.$message.error('获取设备列表失败: ' + error.message);\n      });\n    },\n    submitForm() {\n      this.$refs.dataFormRef.validate(valid => {\n        if (valid) {\n          // 确保 recordTime 是 ISO 8601 格式的字符串，如果后端需要 Date 对象，则需要调整\n          // Element UI 的 value-format=\"yyyy-MM-ddTHH:mm:ss\" 应该能保证格式正确\n          const dataToSubmit = {\n            ...this.formData\n            // 如果后端期望 recordTime 是不含时区的纯净 ISO 字符串，确保 formData.recordTime 符合\n            // 如果后端需要特定时区处理，这里可能需要 moment.js 或其他库来转换\n          };\n          this.$http.post('/api/energy-data', dataToSubmit).then(() => {\n            this.$message.success('能源数据提交成功!');\n            this.resetForm();\n          }).catch(error => {\n            let errorMessage = '能源数据提交失败。';\n            if (error.response && error.response.data && error.response.data.message) {\n              errorMessage += '原因: ' + error.response.data.message;\n            } else if (error.message) {\n              errorMessage += '原因: ' + error.message;\n            }\n            this.$message.error(errorMessage);\n          });\n        } else {\n          this.$message.error('请检查表单输入项!');\n          return false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.dataFormRef.resetFields();\n      // Manually reset non-prop fields if necessary, e.g., if initial values are complex\n      this.formData.energyValue = 0; // el-input-number might not reset to 0 with resetFields if initial is not set\n      this.formData.energyUnit = 'kWh';\n      this.formData.notes = '';\n      // formData.deviceId and recordTime should be reset by resetFields\n    }\n  },\n  created() {\n    this.fetchDevices();\n  }\n};","map":{"version":3,"names":["name","data","formData","deviceId","recordTime","energyValue","energyUnit","notes","deviceList","rules","required","message","trigger","type","methods","fetchDevices","$http","get","then","response","catch","error","$message","submitForm","$refs","dataFormRef","validate","valid","dataToSubmit","post","success","resetForm","errorMessage","resetFields","created"],"sources":["src/views/EnergyDataEntry.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-data-entry-container\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>能源数据录入</span>\r\n      </div>\r\n      <el-form :model=\"formData\" :rules=\"rules\" ref=\"dataFormRef\" label-width=\"120px\">\r\n        <el-form-item label=\"选择设备\" prop=\"deviceId\">\r\n          <el-select v-model=\"formData.deviceId\" placeholder=\"请选择设备\" style=\"width: 100%;\">\r\n            <el-option\r\n              v-for=\"device in deviceList\"\r\n              :key=\"device.id\"\r\n              :label=\"device.name + ' (' + device.model + ')'\"\r\n              :value=\"device.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"记录时间\" prop=\"recordTime\">\r\n          <el-date-picker\r\n            v-model=\"formData.recordTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"选择日期时间\"\r\n            style=\"width: 100%;\"\r\n            format=\"yyyy-MM-dd HH:mm:ss\"\r\n            value-format=\"yyyy-MM-ddTHH:mm:ss\">\r\n          </el-date-picker>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"能耗值\" prop=\"energyValue\">\r\n          <el-input-number v-model=\"formData.energyValue\" :precision=\"2\" :step=\"0.1\" placeholder=\"请输入能耗值\" style=\"width: 100%;\"></el-input-number>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"单位\" prop=\"energyUnit\">\r\n          <el-input v-model=\"formData.energyUnit\" placeholder=\"例如: kWh, m³\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"备注\" prop=\"notes\">\r\n          <el-input type=\"textarea\" v-model=\"formData.notes\" placeholder=\"请输入备注信息\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\">提交</el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'EnergyDataEntry',\r\n  data() {\r\n    return {\r\n      formData: {\r\n        deviceId: null,\r\n        recordTime: '',\r\n        energyValue: 0,\r\n        energyUnit: 'kWh',\r\n        notes: ''\r\n      },\r\n      deviceList: [],\r\n      rules: {\r\n        deviceId: [\r\n          { required: true, message: '请选择设备', trigger: 'change' }\r\n        ],\r\n        recordTime: [\r\n          { required: true, message: '请选择记录时间', trigger: 'change' }\r\n        ],\r\n        energyValue: [\r\n          { required: true, message: '请输入能耗值', trigger: 'blur' },\r\n          { type: 'number', message: '能耗值必须为数字'}\r\n        ],\r\n        energyUnit: [\r\n          { required: true, message: '请输入单位', trigger: 'blur' }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    fetchDevices() {\r\n      this.$http.get('/api/devices')\r\n        .then(response => {\r\n          this.deviceList = response.data;\r\n        })\r\n        .catch(error => {\r\n          this.$message.error('获取设备列表失败: ' + error.message);\r\n        });\r\n    },\r\n    submitForm() {\r\n      this.$refs.dataFormRef.validate((valid) => {\r\n        if (valid) {\r\n          // 确保 recordTime 是 ISO 8601 格式的字符串，如果后端需要 Date 对象，则需要调整\r\n          // Element UI 的 value-format=\"yyyy-MM-ddTHH:mm:ss\" 应该能保证格式正确\r\n          const dataToSubmit = {\r\n            ...this.formData,\r\n            // 如果后端期望 recordTime 是不含时区的纯净 ISO 字符串，确保 formData.recordTime 符合\r\n            // 如果后端需要特定时区处理，这里可能需要 moment.js 或其他库来转换\r\n          };\r\n\r\n          this.$http.post('/api/energy-data', dataToSubmit)\r\n            .then(() => {\r\n              this.$message.success('能源数据提交成功!');\r\n              this.resetForm();\r\n            })\r\n            .catch(error => {\r\n              let errorMessage = '能源数据提交失败。';\r\n              if (error.response && error.response.data && error.response.data.message) {\r\n                errorMessage += '原因: ' + error.response.data.message;\r\n              } else if (error.message) {\r\n                errorMessage += '原因: ' + error.message;\r\n              }\r\n              this.$message.error(errorMessage);\r\n            });\r\n        } else {\r\n          this.$message.error('请检查表单输入项!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm() {\r\n      this.$refs.dataFormRef.resetFields();\r\n      // Manually reset non-prop fields if necessary, e.g., if initial values are complex\r\n      this.formData.energyValue = 0; // el-input-number might not reset to 0 with resetFields if initial is not set\r\n      this.formData.energyUnit = 'kWh';\r\n      this.formData.notes = '';\r\n      // formData.deviceId and recordTime should be reset by resetFields\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDevices();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-data-entry-container {\r\n  padding: 20px;\r\n}\r\n.box-card {\r\n  width: 600px;\r\n  margin: 0 auto;\r\n}\r\n.el-input-number {\r\n  width: 100%;\r\n}\r\n</style>\r\n"],"mappings":"AAmDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,QAAA;QACAC,UAAA;QACAC,WAAA;QACAC,UAAA;QACAC,KAAA;MACA;MACAC,UAAA;MACAC,KAAA;QACAN,QAAA,GACA;UAAAO,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAR,UAAA,GACA;UAAAM,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAP,WAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,IAAA;UAAAF,OAAA;QAAA,EACA;QACAL,UAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,OAAA;IACAC,aAAA;MACA,KAAAC,KAAA,CAAAC,GAAA,iBACAC,IAAA,CAAAC,QAAA;QACA,KAAAX,UAAA,GAAAW,QAAA,CAAAlB,IAAA;MACA,GACAmB,KAAA,CAAAC,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA,gBAAAA,KAAA,CAAAV,OAAA;MACA;IACA;IACAY,WAAA;MACA,KAAAC,KAAA,CAAAC,WAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA;UACA,MAAAC,YAAA;YACA,QAAA1B;YACA;YACA;UACA;UAEA,KAAAc,KAAA,CAAAa,IAAA,qBAAAD,YAAA,EACAV,IAAA;YACA,KAAAI,QAAA,CAAAQ,OAAA;YACA,KAAAC,SAAA;UACA,GACAX,KAAA,CAAAC,KAAA;YACA,IAAAW,YAAA;YACA,IAAAX,KAAA,CAAAF,QAAA,IAAAE,KAAA,CAAAF,QAAA,CAAAlB,IAAA,IAAAoB,KAAA,CAAAF,QAAA,CAAAlB,IAAA,CAAAU,OAAA;cACAqB,YAAA,aAAAX,KAAA,CAAAF,QAAA,CAAAlB,IAAA,CAAAU,OAAA;YACA,WAAAU,KAAA,CAAAV,OAAA;cACAqB,YAAA,aAAAX,KAAA,CAAAV,OAAA;YACA;YACA,KAAAW,QAAA,CAAAD,KAAA,CAAAW,YAAA;UACA;QACA;UACA,KAAAV,QAAA,CAAAD,KAAA;UACA;QACA;MACA;IACA;IACAU,UAAA;MACA,KAAAP,KAAA,CAAAC,WAAA,CAAAQ,WAAA;MACA;MACA,KAAA/B,QAAA,CAAAG,WAAA;MACA,KAAAH,QAAA,CAAAI,UAAA;MACA,KAAAJ,QAAA,CAAAK,KAAA;MACA;IACA;EACA;EACA2B,QAAA;IACA,KAAAnB,YAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}